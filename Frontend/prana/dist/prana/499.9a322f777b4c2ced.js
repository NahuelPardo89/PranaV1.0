"use strict";(self.webpackChunkprana=self.webpackChunkprana||[]).push([[499],{7499:(Rn,X,f)=>{f.r(X),f.d(X,{AppointmentsModule:()=>Gn});var b=f(6895),T=f(1390),Y=f(8739),x=f(6308),_=f(7155),E=f(262),t=f(4650),tt=f(1135),et=f(529);let N=(()=>{class n{constructor(e){this.http=e,this.baseUrl="http://127.0.0.1:8000/appointment/",this.currentUserSubject=new tt.X(null),this.currentUser=this.currentUserSubject.asObservable();const o=localStorage.getItem("user");o&&this.currentUserSubject.next(JSON.parse(o))}getAdminAllAppointments(){return this.http.get(this.baseUrl+"admin/")}getAdminOneAppointment(e){return this.http.get(this.baseUrl+"admin/"+e+"/")}getAdminDoctorAppointments(e){return this.http.get(this.baseUrl+"admin/?doctor_id="+e)}getAdminTodayAppointments(e){return this.http.get(this.baseUrl+"admin/?day="+e)}getDoctorAllAppointments(){return this.http.get(this.baseUrl+"doctor/")}getDoctorsTodayAppointments(e){return this.http.get(this.baseUrl+"doctor/?day="+e)}getPatientAppointments(){return this.http.get(this.baseUrl+"patient/")}getPatientTodayAppointments(e){return this.http.get(this.baseUrl+"patient/?day="+e)}createAdminAppointment(e){return this.http.post(this.baseUrl+"admin/",e)}createDoctorAppointment(e){return this.http.post(this.baseUrl+"doctor/",e)}createPatientAppointment(e){return this.http.post(this.baseUrl+"patient/",e)}deleteAdminAppointment(e){return this.http.delete(this.baseUrl+"admin/"+e+"/")}deleteDoctorAppointment(e){return this.http.delete(this.baseUrl+"doctor/"+e+"/")}deletePatientAppointment(e){return this.http.delete(this.baseUrl+"patient/"+e+"/")}updateAdminAppointment(e,o){return this.http.put(this.baseUrl+"admin/"+e+"/",o)}}return n.\u0275fac=function(e){return new(e||n)(t.LFG(et.eN))},n.\u0275prov=t.Yz7({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();var Q=f(4261),U=f(4144),D=f(9549);function ot(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Fecha"),t.qZA())}function nt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.day)}}function it(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Hora"),t.qZA())}function at(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.hour)}}function rt(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Profesional"),t.qZA())}function st(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.doctor)}}function lt(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Paciente"),t.qZA())}function ct(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.patient)}}function pt(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Especialidad "),t.qZA())}function mt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.specialty)}}function dt(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Especialidad - Rama "),t.qZA())}function ut(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.branch)}}function ht(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Obra Social"),t.qZA())}function ft(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.health_insurance)}}function _t(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Coseg. Paciente "),t.qZA())}function gt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.patient_copayment)}}function At(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Coseg. O.Social "),t.qZA())}function yt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.hi_copayment)}}function Ct(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Estado del Turno "),t.qZA())}function Dt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.appointment_status)}}function bt(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Estado de Pago "),t.qZA())}function vt(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.payment_status)}}function St(n,a){1&n&&(t.TgZ(0,"th",32),t._uU(1,"Acciones"),t.qZA())}function Tt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"td",31)(1,"div",33)(2,"button",34),t.NdJ("click",function(){const r=t.CHM(e).$implicit,s=t.oxw();return t.KtG(s.onEdit(r))}),t.TgZ(3,"i",5),t._uU(4,"edit"),t.qZA()(),t.TgZ(5,"button",35),t.NdJ("click",function(){const r=t.CHM(e).$implicit,s=t.oxw();return t.KtG(s.onDelete(r.id))}),t.TgZ(6,"i",5),t._uU(7,"delete"),t.qZA()()()()}}function Zt(n,a){1&n&&t._UZ(0,"tr",36)}function Ft(n,a){if(1&n&&t._UZ(0,"tr",37),2&n){const e=a.$implicit,o=t.oxw();t.ekj("bg-danger",o.isPendingAndOverdueAppointment(e))("bg-success","CONFIRMADO"===e.appointment_status.toUpperCase())}}const xt=function(){return[20,40,75,100]};let Nt=(()=>{class n{constructor(e,o,i){this.appointmentService=e,this.dialogService=o,this.router=i,this.displayedColumns=["day","hour","patient","doctor","branch","health_insurance","patient_copayment","hi_copayment","appointment_status","payment_status","actions"]}ngOnInit(){this.setDataTable()}setDataTable(e){let o;o=e?this.appointmentService.getAdminTodayAppointments(e):this.appointmentService.getAdminAllAppointments(),o.subscribe(i=>{this.dataSource=new _.by(i),this.paginator._intl.itemsPerPageLabel="items por p\xe1gina",this.paginator._intl.firstPageLabel="primera p\xe1gina",this.paginator._intl.lastPageLabel="\xfaltima p\xe1gina",this.paginator._intl.nextPageLabel="p\xe1gina siguiente",this.paginator._intl.previousPageLabel="p\xe1gina anterior",this.dataSource.paginator=this.paginator,this.dataSource.sort=this.sort})}showAll(){this.setDataTable()}filterToday(){const e=(0,b.p6)(new Date,"yyyy-MM-dd","en-US");this.setDataTable(e)}applyFilter(e){this.dataSource.filter=e.target.value.trim(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()}isPendingAndOverdueAppointment(e){let o=e.day.split("-"),i=e.hour.split(":"),r=new Date(+o[2],o[1]-1,+o[0],+i[0],+i[1]),s=new Date;return(r.getTime()-s.getTime())/1e3/60/60<0&&"ADEUDA"==e.payment_status.toUpperCase()&&"PENDIENTE"==e.appointment_status.toUpperCase()}onEdit(e){this.router.navigate(["Dashboard/appointments/admin/update"],{state:{appointment:e}})}onDelete(e){this.dialogService.openConfirmDialog("\xbfConfirma la eliminaci\xf3n de este turno?").afterClosed().subscribe(i=>{i&&this.appointmentService.deleteAdminAppointment(e).pipe((0,E.K)(r=>{throw console.error("Error en la solicitud:",r),this.dialogService.showErrorDialog(r.error&&r.error.non_field_errors?"Error al eliminar el turno: "+r.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),r})).subscribe(r=>{this.setDataTable(),this.dialogService.showSuccessDialog("Turno eliminado con \xe9xito")})})}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(N),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-admin-list"]],viewQuery:function(e,o){if(1&e&&(t.Gf(Y.NW,5),t.Gf(x.YE,5)),2&e){let i;t.iGM(i=t.CRH())&&(o.paginator=i.first),t.iGM(i=t.CRH())&&(o.sort=i.first)}},decls:61,vars:5,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,""],[1,"container-fluid"],[1,"d-flex","justify-content-start","mb-3"],[1,"btn","btn-info","me-3",3,"click"],[1,"material-symbols-outlined"],["routerLink","create",1,"btn","btn-success"],[1,"example-form-field"],["matInput","",3,"keyup"],["input",""],[1,"table-responsive"],["mat-table","","matSort","",3,"dataSource"],["matColumnDef","day"],["mat-header-cell","","mat-sort-header","",4,"matHeaderCellDef"],["mat-cell","",4,"matCellDef"],["matColumnDef","hour"],["matColumnDef","doctor"],["matColumnDef","patient"],["matColumnDef","specialty"],["matColumnDef","branch"],["matColumnDef","health_insurance"],["matColumnDef","patient_copayment"],["matColumnDef","hi_copayment"],["matColumnDef","appointment_status"],["matColumnDef","payment_status"],["matColumnDef","actions"],["mat-header-cell","",4,"matHeaderCellDef"],["mat-header-row","",4,"matHeaderRowDef"],["mat-row","",3,"bg-danger","bg-success",4,"matRowDef","matRowDefColumns"],["showFirstLastButtons","",3,"pageSizeOptions"],["mat-header-cell","","mat-sort-header",""],["mat-cell",""],["mat-header-cell",""],[2,"display","flex"],["aria-label","Editar turno",1,"btn","btn-primary",3,"click"],["aria-label","Eliminar turno",1,"btn","btn-danger","ms-3",3,"click"],["mat-header-row",""],["mat-row",""]],template:function(e,o){1&e&&(t.TgZ(0,"div")(1,"div",0)(2,"h1",1),t._uU(3,"Listado de Turnos - Administrador"),t.qZA()(),t.TgZ(4,"div",2)(5,"div",3)(6,"button",4),t.NdJ("click",function(){return o.filterToday()}),t._UZ(7,"i",5),t._uU(8,"Turnos de Hoy "),t.qZA(),t.TgZ(9,"button",4),t.NdJ("click",function(){return o.showAll()}),t._UZ(10,"i",5),t._uU(11,"Todos los Turnos "),t.qZA(),t.TgZ(12,"button",6),t._UZ(13,"i",5),t._uU(14,"Crear Turno "),t.qZA()(),t.TgZ(15,"mat-form-field",7)(16,"mat-label"),t._uU(17,"Filtro M\xfaltiple"),t.qZA(),t.TgZ(18,"input",8,9),t.NdJ("keyup",function(r){return o.applyFilter(r)}),t.qZA()(),t.TgZ(20,"div",10)(21,"table",11),t.ynx(22,12),t.YNc(23,ot,2,0,"th",13),t.YNc(24,nt,2,1,"td",14),t.BQk(),t.ynx(25,15),t.YNc(26,it,2,0,"th",13),t.YNc(27,at,2,1,"td",14),t.BQk(),t.ynx(28,16),t.YNc(29,rt,2,0,"th",13),t.YNc(30,st,2,1,"td",14),t.BQk(),t.ynx(31,17),t.YNc(32,lt,2,0,"th",13),t.YNc(33,ct,2,1,"td",14),t.BQk(),t.ynx(34,18),t.YNc(35,pt,2,0,"th",13),t.YNc(36,mt,2,1,"td",14),t.BQk(),t.ynx(37,19),t.YNc(38,dt,2,0,"th",13),t.YNc(39,ut,2,1,"td",14),t.BQk(),t.ynx(40,20),t.YNc(41,ht,2,0,"th",13),t.YNc(42,ft,2,1,"td",14),t.BQk(),t.ynx(43,21),t.YNc(44,_t,2,0,"th",13),t.YNc(45,gt,2,1,"td",14),t.BQk(),t.ynx(46,22),t.YNc(47,At,2,0,"th",13),t.YNc(48,yt,2,1,"td",14),t.BQk(),t.ynx(49,23),t.YNc(50,Ct,2,0,"th",13),t.YNc(51,Dt,2,1,"td",14),t.BQk(),t.ynx(52,24),t.YNc(53,bt,2,0,"th",13),t.YNc(54,vt,2,1,"td",14),t.BQk(),t.ynx(55,25),t.YNc(56,St,2,0,"th",26),t.YNc(57,Tt,8,0,"td",14),t.BQk(),t.YNc(58,Zt,1,0,"tr",27),t.YNc(59,Ft,1,4,"tr",28),t.qZA()(),t._UZ(60,"mat-paginator",29),t.qZA()()),2&e&&(t.xp6(21),t.Q6J("dataSource",o.dataSource),t.xp6(37),t.Q6J("matHeaderRowDef",o.displayedColumns),t.xp6(1),t.Q6J("matRowDefColumns",o.displayedColumns),t.xp6(1),t.Q6J("pageSizeOptions",t.DdM(4,xt)))},dependencies:[T.rH,_.BZ,_.fO,_.as,_.w1,_.Dz,_.nj,_.ge,_.ev,_.XQ,_.Gk,Y.NW,x.YE,x.nU,U.Nt,D.KE,D.hX],styles:[".example-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.mat-elevation-z8[_ngcontent-%COMP%]{background-color:#f5f5f5}button[_ngcontent-%COMP%]{min-height:20px;text-align:left}.btn-icon[_ngcontent-%COMP%]{margin-right:10px;color:#fff}.material-icons[_ngcontent-%COMP%]{margin-right:10px;vertical-align:middle}.highlight[_ngcontent-%COMP%]{background-color:#00ff0035}"]}),n})(),Ut=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-admin-detail"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-admin-detail works!"),t.qZA())}}),n})();var l=f(4006),S=f(9646),Z=f(8675),C=f(4004),O=f(6316),L=f(4057),k=f(8756),$=f(6573),V=f(4684),H=f(503),j=f(6768),B=f(3190),I=f(4385),G=f(3238),F=f(3805);function Pt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function wt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.name),t.xp6(1),t.hij(" ",e.name," ")}}function Jt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Especialidad"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onSpecialtySelect(i.option.value))}),t.TgZ(6,"mat-option",13),t._uU(7,"Sin Solicitar"),t.qZA(),t.YNc(8,wt,2,2,"mat-option",9),t.ALo(9,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.specialtyControl),t.xp6(1),t.Q6J("displayWith",o.displaySpecialtyFn),t.xp6(2),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",t.lcZ(9,5,o.filteredSpecialties))}}function qt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function Mt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Profesional"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDoctorSelect(i.option.value))}),t.YNc(6,qt,2,2,"mat-option",9),t.ALo(7,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.doctorControl),t.xp6(1),t.Q6J("displayWith",o.displayDoctorFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(7,4,o.filteredDoctors))}}function Et(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function Qt(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function Yt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"D\xeda"),t.qZA(),t.TgZ(3,"mat-select",14),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDaySelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un D\xeda"),t.qZA(),t.YNc(6,Et,2,2,"mat-option",9),t.qZA(),t.YNc(7,Qt,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.formattedDates),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.day.errors?null:e.appointmentForm.controls.day.errors.required)}}function Ot(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function Lt(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function $t(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Hora"),t.qZA(),t.TgZ(3,"mat-select",16),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHourSelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un Horario"),t.qZA(),t.YNc(6,Ot,2,2,"mat-option",9),t.qZA(),t.YNc(7,Lt,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.availableTimes),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function Ht(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Bt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Rama (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",17),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onBranchSelect(i))}),t.YNc(4,Ht,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.specialtyFilteredBranches)}}function It(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function kt(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Obra Social (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",18)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,It,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.insurances)}}function Vt(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1," El costo no puede ser un valor negativo "),t.qZA())}function jt(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Costo (Opcional)"),t.qZA(),t._UZ(3,"input",19),t.YNc(4,Vt,2,0,"mat-error",15),t.qZA()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngIf",e.appointmentForm.get("full_cost").hasError("min"))}}function Gt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Rt(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado del Turno (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",20)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,Gt,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.appointment_status_choices)}}function Kt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function zt(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado de Pago (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",21),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.updatePaymentVisibility(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,Kt,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.payment_status_choices)}}function Wt(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Xt(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"M\xe9todo de Pago"),t.qZA(),t.TgZ(3,"mat-select",22)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,Wt,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.methods)}}let te=(()=>{class n{constructor(e,o,i,r,s,c,p,d,g,v,A,m){this.fb=e,this.doctorService=o,this.branchService=i,this.specialtyService=r,this.appointmentService=s,this.patientService=c,this.paymentmethodservice=p,this.insuranceService=d,this.specialtyFilterService=g,this.doctorScheduleService=v,this.dialogService=A,this.router=m,this.patients=[],this.doctors=[],this.specialties=[],this.methods=[],this.insurances=[],this.doctorSchedule=[],this.specialtyFilteredDoctors=[],this.specialtyFilteredBranches=[],this.selectedSpecialty=0,this.selectedBranch=0,this.selectedPatient=0,this.selectedDoctor=0,this.isPaid=null,this.formattedDates=[],this.availableTimes=[],this.finalJsonDate="",this.finalJsonHour="",this.appointment_status_choices=[{value:1,viewValue:"Pendiente"},{value:2,viewValue:"Confirmado"},{value:3,viewValue:"Finalizado"}],this.payment_status_choices=[{value:1,viewValue:"Adeuda"},{value:2,viewValue:"Pagado"}],this.doctorControl=new l.NI,this.patientControl=new l.NI,this.specialtyControl=new l.NI,this.filteredSpecialties=(0,S.of)([]),this.filteredDoctors=(0,S.of)([]),this.filteredPatients=(0,S.of)([]),this.patientName="",this.doctorName="",this.specialtytName="",this.branchName="",this.displayDoctorFn=u=>{if(void 0!==this.specialtyFilteredDoctors){let h=this.specialtyFilteredDoctors.find(y=>y.id===u);return this.doctorName=h?h.user.toString():"",this.doctorName}},this.displayPatientFn=u=>{if(void 0!==this.patients){let h=this.patients.find(y=>y.id===u);return this.patientName=h?h.user.toString():"",this.patientName}},this.displaySpecialtyFn=u=>{if(void 0!==this.specialties){let h=this.specialties.find(y=>y.name===u);return this.specialtytName=h?h.name:"",this.specialtytName}},this.appointmentForm=this.fb.group({day:["",l.kI.required],hour:["",l.kI.required],doctor:[null,l.kI.required],patient:[null,l.kI.required],duration:[null],specialty:[null,l.kI.required],branch:[null],appointment_status:[null],payment_status:[null],payment_method:[null],full_cost:[null,[l.kI.min(0)]],health_insurance:[null]}),this.appointmentResponse={id:0,day:new Date,hour:"",patient:0,doctor:0,payment_method:0,full_cost:0,hi_copayment:0,patient_copayment:0,specialty:0,branch:0,health_insurance:0,duration:"",appointment_status:0,payment_status:0}}ngOnInit(){this.loadDoctors(),this.loadSpecialties(),this.loadPatients(),this.loadPaymentMethods()}loadDoctors(){this.doctorService.getDoctors().subscribe(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.doctors=o})}loadSpecialties(){this.specialtyService.getSpecialities().subscribe(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.name.localeCompare(r.name)),this.specialties=o,this.filterSpecialties()})}loadPatients(){this.patientService.getAllPatients().subscribe(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.patients=o,this.filterPatients()})}loadPaymentMethods(){this.paymentmethodservice.getPaymentMethods().subscribe(e=>{e.sort((o,i)=>o.name.localeCompare(i.name)),this.methods=e})}onSpecialtySelect(e){this.selectedSpecialty=e,null!==e?(this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0}),this.loadfilteredDoctors(this.selectedSpecialty),this.filterDoctors()):this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0})}onDoctorSelect(e){this.selectedDoctor=e,null!==this.selectedDoctor?(this.resetForm(this.appointmentForm,{day:!0,branch:!0}),this.doctorScheduleService.getDoctorSchedule(e).subscribe(o=>{this.doctorSchedule=o,this.formattedDates=this.formatDates(this.doctorSchedule),this.loadfilteredBranches(e)})):this.resetForm(this.appointmentForm,{day:!0,branch:!0})}onDaySelect(e){null!==this.selectedDoctor&&""!==e&&null!=e?(this.resetForm(this.appointmentForm,{hour:!0}),this.finalJsonDate=this.parseDateStringToDate(e),this.doctorScheduleService.getDoctorAvailableTime(this.selectedDoctor,this.finalJsonDate).subscribe(o=>{this.availableTimes=o.available_times})):this.resetForm(this.appointmentForm,{hour:!0})}onHourSelect(e){this.finalJsonHour=""!==e&&void 0!==e?this.getStartAppointmentHour(e):""}onPatientSelect(e){this.selectedPatient=e,this.selectedPatient?this.selectedDoctor&&this.selectedBranch&&(this.resetForm(this.appointmentForm,{hi:!0}),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)):this.resetForm(this.appointmentForm,{specialty:!0})}onBranchSelect(e){this.selectedBranch=e;let o=this.specialtyFilteredBranches.find(i=>i.id===e);this.resetForm(this.appointmentForm,{hi:!0}),o&&(this.branchName=o.name),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)}updatePaymentVisibility(e){this.isPaid=2===e,this.isPaid||this.appointmentForm.patchValue({payment_method:null})}filterPatients(){this.filteredPatients=this.patientControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterPatientsByName(e):this.patients.slice()))}filterPatientsByName(e){if(e){const o=e.toLowerCase();return this.patients.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.patients}loadfilteredDoctors(e){this.specialtyFilteredDoctors=this.specialtyFilterService.filterDoctorsBySpecialty(this.doctors,e)}filterDoctors(){this.filteredDoctors=this.doctorControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterDoctorsBySpecialty(e):this.specialtyFilteredDoctors.slice()))}filterDoctorsBySpecialty(e){if(e){const o=e.toLowerCase();return this.specialtyFilteredDoctors.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.specialtyFilteredDoctors}filterSpecialties(){this.filteredSpecialties=this.specialtyControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterSpecialtiesByName(e):this.specialties.slice()))}filterSpecialtiesByName(e){if(e){const o=e.toLowerCase();return this.specialties.some(r=>r.name.toLowerCase()===o)?this.specialties:this.specialties.filter(r=>r.name.toString().toLowerCase().includes(o))}return this.specialties}loadfilteredBranches(e){this.branchService.getDoctorBranches(e).subscribe(o=>{if(this.specialtyFilteredBranches=o.filter(i=>i.is_active),this.specialtyFilteredBranches.length>0){let i=this.specialtyFilteredBranches.find(r=>"GENERAL"===r.name.toUpperCase());this.selectedBranch=i&&i.id?i.id:0}else this.selectedBranch=0;this.appointmentForm.patchValue({branch:this.selectedBranch}),this.loadCommonInsurances(e,this.selectedPatient,this.selectedBranch)})}loadCommonInsurances(e,o,i){this.insuranceService.getDoctorPatientCommonHI(e,o,i).subscribe(r=>{r.sort((s,c)=>s.name.localeCompare(c.name)),this.insurances=r})}formatDates(e){const o=["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"],i=["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],r=[],s=new Date;for(let c=0;c<2;c++){const p=new Date;p.setDate(1),p.setMonth(p.getMonth()+c);const d=p.getFullYear(),g=p.getMonth(),v=new Date(d,g+1,0).getDate();for(let A=0;A<v;A++){const m=new Date(d,g,A+1);if(m<s&&m.toDateString()!==s.toDateString())continue;const J=`${o[m.getDay()]} ${m.getDate()} de ${i[g]} de ${d}`,q=m.toDateString().toLocaleLowerCase().slice(0,3);e.find(M=>M.day===q)&&r.push(`${J}`)}}return r}resetForm(e,o){o&&o.specialty&&this.specialtyControl.setValue(0),o&&o.doctor&&this.doctorControl.setValue(null),o&&o.day&&(e.patchValue({day:""}),this.formattedDates=[],this.finalJsonDate=""),o&&o.hour&&(e.patchValue({hour:""}),this.availableTimes=[],this.finalJsonHour=""),o&&o.branch&&e.patchValue({branch:0}),o&&o.hi&&e.patchValue({health_insurance:null}),e.patchValue({appointment_status:null,payment_status:null,payment_method:null,full_cost:null})}validateForm(){let e=this.appointmentForm.get("day"),o=this.appointmentForm.get("hour");return this.patientControl.value?this.specialtyControl.value?this.doctorControl.value?e&&e.value?!(!o||!o.value)||(this.dialogService.showErrorDialog('El campo "Hora "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "D\xeda "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Profesional "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Especialidad "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Paciente "no puede ser vac\xedo, por favor, asigne un valor'),!1)}parseDateStringToDate(e){const o=e.split(" ");if(o.length<6)throw new Error('Cadena de fecha incorrecta. Debe tener el formato "D\xeda n\xfamero de Mes de A\xf1o".');return`${o[5]}-${{Enero:"01",Febrero:"02",Marzo:"03",Abril:"04",Mayo:"05",Junio:"06",Julio:"07",Agosto:"08",Septiembre:"09",Octubre:"10",Noviembre:"11",Diciembre:"12"}[o[3]]}-${o[1]}`}getStartAppointmentHour(e){const o=e.split("-");if(2!==o.length)throw new Error("Datos de entrada incorrectos al querer formatear el horario del turno ");return o[0].trim()}displayPreviewAppointment(){return`Desea confirmar el turno con los siguientes datos?: <br>\n    <strong>Paciente:</strong> ${this.patientName} <br>\n    <strong>Profesional:</strong> ${this.doctorName} <br>\n    <strong>D\xeda:</strong> ${this.appointmentForm.get("day")?.value} <br>\n    <strong>Hora:</strong> ${this.appointmentForm.get("hour")?.value} <br>\n    <strong>Especialidad:</strong> ${this.specialtytName} <br>\n    <strong>Rama:</strong> ${this.branchName} <br>\n    <strong>Obra Social:</strong> ${this.findFormHi()} <br>\n    <strong>Estado del Turno:</strong> ${this.findFormAppointmentStatus()} <br>\n    <strong>Estado del Pago:</strong> ${this.findFormPaymentStatus()} <br>\n    <strong>Costo:</strong> ${this.findFormFullCost()} <br>\n    <strong>M\xe9todo de Pago:</strong> ${this.findFormPaymentMethod()} <br>`}findFormHi(){const e=this.appointmentForm.get("health_insurance")?.value;if(e){const o=this.insurances.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormAppointmentStatus(){const e=this.appointmentForm.get("appointment_status")?.value;if(e){const o=this.appointment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Pendiente"}return"Pendiente"}findFormPaymentStatus(){const e=this.appointmentForm.get("payment_status")?.value;if(e){const o=this.payment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Adeuda"}return"Adeuda"}findFormPaymentMethod(){const e=this.appointmentForm.get("payment_method")?.value;if(e){const o=this.methods.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormFullCost(){const e=this.appointmentForm.get("full_cost")?.value;return e?e.toString():"Sin especificar"}onSubmit(){if(this.validateForm()){const e=this.appointmentForm.value,o={day:this.finalJsonDate,hour:this.finalJsonHour,doctor:this.selectedDoctor,patient:this.selectedPatient};null!=e.branch&&(o.branch=e.branch),null!=e.payment_method&&(o.payment_method=e.payment_method),null!=e.full_cost&&(o.full_cost=e.full_cost),null!=e.duration&&(o.duration=e.duration),null!=e.appointment_status&&(o.appointment_status=e.appointment_status),null!=e.payment_status&&(o.payment_status=e.payment_status),null!=e.health_insurance&&(o.health_insurance=e.health_insurance),this.dialogService.openConfirmDialog(`${this.displayPreviewAppointment()}`).afterClosed().subscribe(r=>{r&&this.appointmentService.createAdminAppointment(o).pipe((0,E.K)(s=>{throw console.error("Error en la solicitud:",s),this.dialogService.showErrorDialog(s.error&&s.error.non_field_errors?"Error al generar el turno: "+s.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),s})).subscribe(s=>{this.appointmentResponse=s,this.dialogService.showSuccessDialog("Turno generado exitosamente").afterClosed().subscribe(()=>{this.dialogService.openConfirmDialog("\xbfDesea generar otro turno?").afterClosed().subscribe(d=>{d?window.location.reload():this.router.navigate(["Dashboard/appointments/admin/list"])})})})})}}onCancel(){this.router.navigate(["/Dashboard/appointments/admin/list"])}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(l.qu),t.Y36(O.F),t.Y36(L.b),t.Y36(k.d),t.Y36(N),t.Y36($.e),t.Y36(V.e),t.Y36(H.L),t.Y36(j.C),t.Y36(B.J),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-create"]],decls:29,vars:17,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,"card"],[1,"card-header","bg-info","text-dark","text-center"],[1,"card-body"],[1,"create-user-form",3,"formGroup","ngSubmit"],["appearance","outline"],["matInput","",3,"matAutocomplete","formControl"],["autoActiveFirstOption","",3,"displayWith","optionSelected"],["auto","matAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["appearance","outline",4,"ngIf"],["type","submit",1,"btn","btn-primary"],[1,"btn","btn-secondary",3,"click"],[3,"value"],["formControlName","day",3,"ngModelChange"],[4,"ngIf"],["formControlName","hour",3,"ngModelChange"],["formControlName","branch",3,"ngModelChange"],["formControlName","health_insurance"],["matInput","","formControlName","full_cost","type","number","id","full_cost"],["formControlName","appointment_status"],["formControlName","payment_status",3,"ngModelChange"],["formControlName","payment_method"]],template:function(e,o){if(1&e&&(t.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h2"),t._uU(4,"Crear Turno - Administrador"),t.qZA()(),t.TgZ(5,"div",3)(6,"form",4),t.NdJ("ngSubmit",function(){return o.onSubmit()}),t.TgZ(7,"mat-form-field",5)(8,"mat-label"),t._uU(9,"Paciente"),t.qZA(),t._UZ(10,"input",6),t.TgZ(11,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(r){return o.onPatientSelect(r.option.value)}),t.YNc(13,Pt,2,2,"mat-option",9),t.ALo(14,"async"),t.qZA()(),t.YNc(15,Jt,10,7,"mat-form-field",10),t.YNc(16,Mt,8,6,"mat-form-field",10),t.YNc(17,Yt,8,2,"mat-form-field",10),t.YNc(18,$t,8,2,"mat-form-field",10),t.YNc(19,Bt,5,1,"mat-form-field",10),t.YNc(20,kt,7,2,"mat-form-field",10),t.YNc(21,jt,5,1,"mat-form-field",10),t.YNc(22,Rt,7,2,"mat-form-field",10),t.YNc(23,zt,7,2,"mat-form-field",10),t.YNc(24,Xt,7,2,"mat-form-field",10),t.TgZ(25,"button",11),t._uU(26,"Crear"),t.qZA(),t.TgZ(27,"button",12),t.NdJ("click",function(){return o.onCancel()}),t._uU(28,"Cancelar"),t.qZA()()()()()),2&e){const i=t.MAs(12);t.xp6(6),t.Q6J("formGroup",o.appointmentForm),t.xp6(4),t.Q6J("matAutocomplete",i)("formControl",o.patientControl),t.xp6(1),t.Q6J("displayWith",o.displayPatientFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(14,15,o.filteredPatients)),t.xp6(2),t.Q6J("ngIf",o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedBranch&&o.selectedDoctor&&o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.isPaid&&o.selectedSpecialty&&o.selectedDoctor)}},dependencies:[b.sg,b.O5,U.Nt,D.KE,D.hX,D.TO,l._Y,l.Fj,l.wV,l.JJ,l.JL,l.oH,l.sg,l.u,I.gD,G.ey,F.XC,F.ZL,b.Ov],styles:["create-user-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px}mat-form-field[_ngcontent-%COMP%]{width:100%}button[_ngcontent-%COMP%]{width:100%;margin-top:10px}"]}),n})();var K=f(5861),P=f(3905),w=f(8505);function ee(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function oe(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.name),t.xp6(1),t.hij(" ",e.name," ")}}function ne(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Especialidad"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onSpecialtySelect(i.option.value))}),t.TgZ(6,"mat-option",13),t._uU(7,"Sin Solicitar"),t.qZA(),t.YNc(8,oe,2,2,"mat-option",9),t.ALo(9,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.specialtyControl),t.xp6(1),t.Q6J("displayWith",o.displaySpecialtyFn),t.xp6(2),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",t.lcZ(9,5,o.filteredSpecialties))}}function ie(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function ae(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Profesional"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDoctorSelect(i.option.value))}),t.YNc(6,ie,2,2,"mat-option",9),t.ALo(7,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.doctorControl),t.xp6(1),t.Q6J("displayWith",o.displayDoctorFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(7,4,o.filteredDoctors))}}function re(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function se(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function le(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"D\xeda"),t.qZA(),t.TgZ(3,"mat-select",14),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDaySelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un D\xeda"),t.qZA(),t.YNc(6,re,2,2,"mat-option",9),t.qZA(),t.YNc(7,se,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.formattedDates),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.day.errors?null:e.appointmentForm.controls.day.errors.required)}}function ce(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function pe(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function me(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Hora"),t.qZA(),t.TgZ(3,"mat-select",16),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHourSelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un Horario"),t.qZA(),t.YNc(6,ce,2,2,"mat-option",9),t.qZA(),t.YNc(7,pe,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.availableTimes),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function de(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function ue(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function he(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Rama (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",17),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onBranchSelect(i))}),t.YNc(4,de,2,2,"mat-option",9),t.qZA(),t.YNc(5,ue,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.specialtyFilteredBranches),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function fe(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function _e(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Obra Social (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",18),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHISelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,fe,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.insurances)}}function ge(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1," El costo no puede ser un valor negativo "),t.qZA())}function Ae(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Costo (Opcional)"),t.qZA(),t._UZ(3,"input",19),t.YNc(4,ge,2,0,"mat-error",15),t.qZA()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngIf",e.appointmentForm.get("full_cost").hasError("min"))}}function ye(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Ce(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado del Turno (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",20)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,ye,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.appointment_status_choices)}}function De(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function be(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado de Pago (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",21),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.updatePaymentVisibility(i))}),t.YNc(4,De,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.payment_status_choices)}}function ve(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Se(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"M\xe9todo de Pago"),t.qZA(),t.TgZ(3,"mat-select",22)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,ve,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.methods)}}let Te=(()=>{class n{constructor(e,o,i,r,s,c,p,d,g,v,A,m){this.fb=e,this.doctorService=o,this.branchService=i,this.specialtyService=r,this.appointmentService=s,this.patientService=c,this.paymentmethodservice=p,this.insuranceService=d,this.specialtyFilterService=g,this.doctorScheduleService=v,this.dialogService=A,this.router=m,this.patients=[],this.doctors=[],this.specialties=[],this.methods=[],this.insurances=[],this.doctorSchedule=[],this.specialtyFilteredDoctors=[],this.specialtyFilteredBranches=[],this.selectedSpecialty=0,this.selectedBranch=0,this.selectedPatient=0,this.selectedDoctor=0,this.isPaid=null,this.formattedDates=[],this.availableTimes=[],this.finalJsonDate="",this.finalJsonHour="",this.appointment_status_choices=[{value:1,viewValue:"Pendiente"},{value:2,viewValue:"Confirmado"},{value:3,viewValue:"Finalizado"}],this.payment_status_choices=[{value:1,viewValue:"Adeuda"},{value:2,viewValue:"Pagado"}],this.recoveredHour="",this.recoveredDate="",this.doctorControl=new l.NI,this.patientControl=new l.NI,this.specialtyControl=new l.NI,this.filteredSpecialties=(0,S.of)([]),this.filteredDoctors=(0,S.of)([]),this.filteredPatients=(0,S.of)([]),this.patientName="",this.doctorName="",this.specialtytName="",this.branchName="",this.displayDoctorFn=u=>{if(void 0!==this.specialtyFilteredDoctors){let h=this.specialtyFilteredDoctors.find(y=>y.id===u);return this.doctorName=h?h.user.toString():"",this.doctorName}},this.displayPatientFn=u=>{if(void 0!==this.patients){let h=this.patients.find(y=>y.id===u);return this.patientName=h?h.user.toString():"",this.patientName}},this.displaySpecialtyFn=u=>{if(void 0!==this.specialties){let h=this.specialties.find(y=>y.name===u);return this.specialtytName=h?h.name:"",this.specialtytName}},this.appointmentForm=this.fb.group({day:["",l.kI.required],hour:["",l.kI.required],doctor:[null,l.kI.required],patient:[null,l.kI.required],duration:[null],specialty:[null,l.kI.required],branch:[null],appointment_status:[null],payment_status:[null],payment_method:[null],full_cost:[null,l.kI.min(0)],health_insurance:[null]}),this.appointmentResponse={id:0,day:new Date,hour:"",patient:0,doctor:0,payment_method:0,full_cost:0,hi_copayment:0,patient_copayment:0,specialty:0,branch:0,health_insurance:0,duration:"",appointment_status:0,payment_status:0}}ngOnInit(){var e=this;return(0,K.Z)(function*(){history.state.appointment&&(yield Promise.all([(0,P.z)(e.loadDoctors()),(0,P.z)(e.loadSpecialties()),(0,P.z)(e.loadPatients()),(0,P.z)(e.loadPaymentMethods())]).then(()=>{e.initForm(history.state.appointment)}))})()}initForm(e){this.appointmentService.getAdminOneAppointment(e.id).subscribe(o=>{this.patientControl.patchValue(o.patient),this.onPatientSelect(o.patient),this.specialtyControl.patchValue(e.specialty),this.onSpecialtySelect(e.specialty),this.doctorControl.patchValue(o.doctor),this.recoveredDate=this.recoverDayFormat(o.day),this.onDoctorSelect(o.doctor),this.appointmentForm.patchValue({day:this.recoveredDate}),this.onDaySelect(this.recoveredDate),this.recoveredHour=this.recoveryHourFormat(o.hour,o.duration),this.appointmentForm.patchValue({hour:this.recoveredHour}),this.onHourSelect(this.recoveredHour),this.appointmentForm.patchValue({branch:o.branch,appointment_status:o.appointment_status,payment_status:o.payment_status,payment_method:o.payment_method,full_cost:o.full_cost,health_insurance:o.health_insurance}),this.selectedBranch=o.branch,this.isPaid=2===o.payment_status})}loadDoctors(){return this.doctorService.getDoctors().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.doctors=o}))}loadSpecialties(){return this.specialtyService.getSpecialities().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.name.localeCompare(r.name)),this.specialties=o,this.filterSpecialties()}))}loadPatients(){return this.patientService.getAllPatients().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.patients=o,this.filterPatients()}))}loadPaymentMethods(){return this.paymentmethodservice.getPaymentMethods().pipe((0,w.b)(e=>{e.sort((o,i)=>o.name.localeCompare(i.name)),this.methods=e}))}onSpecialtySelect(e){this.selectedSpecialty=e,null!==e?(this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0}),this.loadfilteredDoctors(this.selectedSpecialty),this.filterDoctors()):this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0})}onDoctorSelect(e){this.selectedDoctor=e,null!==this.selectedDoctor?(this.resetForm(this.appointmentForm,{day:!0,branch:!0}),this.doctorScheduleService.getDoctorSchedule(e).subscribe(o=>{this.doctorSchedule=o,this.formattedDates=this.formatDates(this.doctorSchedule),this.formattedDates.unshift(this.recoveredDate),this.loadfilteredBranches(e)})):this.resetForm(this.appointmentForm,{day:!0,branch:!0})}onDaySelect(e){null!==this.selectedDoctor&&""!==e&&null!=e?(this.resetForm(this.appointmentForm,{hour:!0}),this.finalJsonDate=this.parseDateStringToDate(e),this.doctorScheduleService.getDoctorAvailableTime(this.selectedDoctor,this.finalJsonDate).subscribe(o=>{this.availableTimes=o.available_times,this.availableTimes.unshift(this.recoveredHour)})):this.resetForm(this.appointmentForm,{hour:!0})}onHourSelect(e){this.finalJsonHour=""!==e&&void 0!==e?this.getStartAppointmentHour(e):""}onPatientSelect(e){this.selectedPatient=e,this.selectedPatient?this.selectedDoctor&&this.selectedBranch&&(this.resetForm(this.appointmentForm,{hi:!0}),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)):this.resetForm(this.appointmentForm,{specialty:!0})}onBranchSelect(e){this.selectedBranch=e;let o=this.specialtyFilteredBranches.find(i=>i.id===e);this.resetForm(this.appointmentForm,{hi:!0}),o&&(this.branchName=o.name),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)}onHISelect(e){this.resetForm(this.appointmentForm)}updatePaymentVisibility(e){this.isPaid=2===e,this.isPaid||this.appointmentForm.patchValue({payment_method:null})}filterPatients(){this.filteredPatients=this.patientControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterPatientsByName(e):this.patients.slice()))}filterPatientsByName(e){if(e){const o=e.toLowerCase();return this.patients.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.patients}loadfilteredDoctors(e){this.specialtyFilteredDoctors=this.specialtyFilterService.filterDoctorsBySpecialty(this.doctors,e)}filterDoctors(){this.filteredDoctors=this.doctorControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterDoctorsBySpecialty(e):this.specialtyFilteredDoctors.slice()))}filterDoctorsBySpecialty(e){if(e){const o=e.toLowerCase();return this.specialtyFilteredDoctors.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.specialtyFilteredDoctors}filterSpecialties(){this.filteredSpecialties=this.specialtyControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterSpecialtiesByName(e):this.specialties.slice()))}filterSpecialtiesByName(e){if(e){const o=e.toLowerCase();return this.specialties.some(r=>r.name.toLowerCase()===o)?this.specialties:this.specialties.filter(r=>r.name.toString().toLowerCase().includes(o))}return this.specialties}loadfilteredBranches(e){this.branchService.getDoctorBranches(e).subscribe(o=>{let i=o.filter(r=>r.is_active);i.sort((r,s)=>r.name.localeCompare(s.name)),this.specialtyFilteredBranches=i,this.loadCommonInsurances(e,this.selectedPatient,this.selectedBranch)})}loadCommonInsurances(e,o,i){this.insuranceService.getDoctorPatientCommonHI(e,o,i).subscribe(r=>{let s=r.filter(c=>c.is_active);s.sort((c,p)=>c.name.localeCompare(p.name)),this.insurances=s})}formatDates(e){const o=["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"],i=["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],r=[],s=new Date;for(let c=0;c<2;c++){const p=new Date;p.setDate(1),p.setMonth(p.getMonth()+c);const d=p.getFullYear(),g=p.getMonth(),v=new Date(d,g+1,0).getDate();for(let A=0;A<v;A++){const m=new Date(d,g,A+1);if(m<s&&m.toDateString()!==s.toDateString())continue;const J=`${o[m.getDay()]} ${m.getDate()} de ${i[g]} de ${d}`,q=m.toDateString().toLocaleLowerCase().slice(0,3);e.find(M=>M.day===q)&&r.push(`${J}`)}}return r}recoverDayFormat(e){let o=e.toString().split("-"),i=new Date(parseInt(o[0]),parseInt(o[1])-1,parseInt(o[2]));return`${["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"][i.getDay()]} ${i.getDate()} de ${["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"][i.getMonth()]} de ${i.getFullYear()}`}recoveryHourFormat(e,o){let i=new Date(`1970-01-01T${e}Z`),r=new Date(`1970-01-01T${o}Z`),s=new Date(i.getTime()+r.getTime());return`${i.toISOString().slice(11,16)} - ${s.toISOString().slice(11,16)}`}resetForm(e,o){o&&o.specialty&&this.specialtyControl.setValue(0),o&&o.doctor&&this.doctorControl.setValue(null),o&&o.day&&(e.patchValue({day:""}),this.formattedDates=[],this.finalJsonDate=""),o&&o.hour&&(e.patchValue({hour:""}),this.availableTimes=[],this.finalJsonHour=""),o&&o.branch&&e.patchValue({branch:0}),o&&o.hi&&e.patchValue({health_insurance:null}),e.patchValue({payment_method:null,full_cost:null,appointment_status:1,payment_status:1})}validateForm(){let e=this.appointmentForm.get("day"),o=this.appointmentForm.get("hour");return this.patientControl.value?this.specialtyControl.value?this.doctorControl.value?e&&e.value?!(!o||!o.value)||(this.dialogService.showErrorDialog('El campo "Hora "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "D\xeda "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Profesional "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Especialidad "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Paciente "no puede ser vac\xedo, por favor, asigne un valor'),!1)}parseDateStringToDate(e){const o=e.split(" ");if(o.length<6)throw new Error('Cadena de fecha incorrecta. Debe tener el formato "D\xeda n\xfamero de Mes de A\xf1o".');return`${o[5]}-${{Enero:"01",Febrero:"02",Marzo:"03",Abril:"04",Mayo:"05",Junio:"06",Julio:"07",Agosto:"08",Septiembre:"09",Octubre:"10",Noviembre:"11",Diciembre:"12"}[o[3]]}-${o[1]}`}getStartAppointmentHour(e){const o=e.split("-");if(2!==o.length)throw new Error("Datos de entrada incorrectos al querer formatear el horario del turno ");return o[0].trim()}displayPreviewAppointment(){return`Desea confirmar el turno con los siguientes datos?: <br>\n    <strong> Paciente: </strong> ${this.patientName} <br>\n    <strong> Profesional: </strong> ${this.doctorName} <br>\n    <strong> D\xeda: </strong> ${this.appointmentForm.get("day")?.value} <br>\n    <strong> Hora: </strong> ${this.appointmentForm.get("hour")?.value} <br>\n    <strong> Especialidad: </strong> ${this.specialtytName} <br>\n    <strong> Rama: </strong> ${this.branchName} <br>\n    <strong> Obra Social: </strong> ${this.findFormHi()} <br>\n    <strong> Estado del Turno: </strong> ${this.findFormAppointmentStatus()} <br>\n    <strong> Estado de Pago: </strong> ${this.findFormPaymentStatus()} <br>\n    <strong> Costo: </strong> ${this.findFormFullCost()} <br>\n    <strong> M\xe9todo de Pago: </strong> ${this.findFormPaymentMethod()} <br>`}findFormHi(){const e=this.appointmentForm.get("health_insurance")?.value;if(e){const o=this.insurances.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormAppointmentStatus(){const e=this.appointmentForm.get("appointment_status")?.value;if(e){const o=this.appointment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Pendiente"}return"Pendiente"}findFormPaymentStatus(){const e=this.appointmentForm.get("payment_status")?.value;if(e){const o=this.payment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Adeuda"}return"Adeuda"}findFormPaymentMethod(){const e=this.appointmentForm.get("payment_method")?.value;if(e){const o=this.methods.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormFullCost(){const e=this.appointmentForm.get("full_cost")?.value;return e?e.toString():"Sin especificar"}onSubmit(){if(this.validateForm()){const e=this.appointmentForm.value,o={day:this.finalJsonDate,hour:this.finalJsonHour,doctor:this.selectedDoctor,patient:this.selectedPatient,payment_method:e.payment_method};null!=e.branch&&(o.branch=e.branch),null!=e.full_cost&&(o.full_cost=e.full_cost),null!=e.duration&&(o.duration=e.duration),null!=e.appointment_status&&(o.appointment_status=e.appointment_status),null!=e.payment_status&&(o.payment_status=e.payment_status),null!=e.health_insurance&&(o.health_insurance=e.health_insurance),this.dialogService.openConfirmDialog(`${this.displayPreviewAppointment()}`).afterClosed().subscribe(r=>{r&&this.appointmentService.updateAdminAppointment(history.state.appointment.id,o).pipe((0,E.K)(s=>{throw console.error("Error en la solicitud:",s),this.dialogService.showErrorDialog(s.error&&s.error.non_field_errors?"Error al generar el turno: "+s.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),s})).subscribe(s=>{this.appointmentResponse=s,this.dialogService.showSuccessDialog("Turno Actualizado exitosamente").afterClosed().subscribe(()=>{this.router.navigate(["Dashboard/appointments/admin/list"])})})})}}onCancel(){this.router.navigate(["Dashboard/appointments/admin/list"])}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(l.qu),t.Y36(O.F),t.Y36(L.b),t.Y36(k.d),t.Y36(N),t.Y36($.e),t.Y36(V.e),t.Y36(H.L),t.Y36(j.C),t.Y36(B.J),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-admin-update"]],decls:29,vars:17,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,"card"],[1,"card-header","bg-info","text-dark","text-center"],[1,"card-body"],[1,"create-user-form",3,"formGroup","ngSubmit"],["appearance","outline"],["matInput","",3,"matAutocomplete","formControl"],["autoActiveFirstOption","",3,"displayWith","optionSelected"],["auto","matAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["appearance","outline",4,"ngIf"],["type","submit",1,"btn","btn-primary"],[1,"btn","btn-secondary",3,"click"],[3,"value"],["formControlName","day",3,"ngModelChange"],[4,"ngIf"],["formControlName","hour",3,"ngModelChange"],["formControlName","branch",3,"ngModelChange"],["formControlName","health_insurance",3,"ngModelChange"],["matInput","","formControlName","full_cost","type","number","id","full_cost"],["formControlName","appointment_status"],["formControlName","payment_status",3,"ngModelChange"],["formControlName","payment_method"]],template:function(e,o){if(1&e&&(t.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h2"),t._uU(4,"Actualizar Turno - Administrador"),t.qZA()(),t.TgZ(5,"div",3)(6,"form",4),t.NdJ("ngSubmit",function(){return o.onSubmit()}),t.TgZ(7,"mat-form-field",5)(8,"mat-label"),t._uU(9,"Paciente"),t.qZA(),t._UZ(10,"input",6),t.TgZ(11,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(r){return o.onPatientSelect(r.option.value)}),t.YNc(13,ee,2,2,"mat-option",9),t.ALo(14,"async"),t.qZA()(),t.YNc(15,ne,10,7,"mat-form-field",10),t.YNc(16,ae,8,6,"mat-form-field",10),t.YNc(17,le,8,2,"mat-form-field",10),t.YNc(18,me,8,2,"mat-form-field",10),t.YNc(19,he,6,2,"mat-form-field",10),t.YNc(20,_e,7,2,"mat-form-field",10),t.YNc(21,Ae,5,1,"mat-form-field",10),t.YNc(22,Ce,7,2,"mat-form-field",10),t.YNc(23,be,5,1,"mat-form-field",10),t.YNc(24,Se,7,2,"mat-form-field",10),t.TgZ(25,"button",11),t._uU(26,"Actualizar"),t.qZA(),t.TgZ(27,"button",12),t.NdJ("click",function(){return o.onCancel()}),t._uU(28,"Cancelar"),t.qZA()()()()()),2&e){const i=t.MAs(12);t.xp6(6),t.Q6J("formGroup",o.appointmentForm),t.xp6(4),t.Q6J("matAutocomplete",i)("formControl",o.patientControl),t.xp6(1),t.Q6J("displayWith",o.displayPatientFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(14,15,o.filteredPatients)),t.xp6(2),t.Q6J("ngIf",o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedBranch&&o.selectedDoctor&&o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.isPaid&&o.selectedSpecialty&&o.selectedDoctor)}},dependencies:[b.sg,b.O5,U.Nt,D.KE,D.hX,D.TO,l._Y,l.Fj,l.wV,l.JJ,l.JL,l.oH,l.sg,l.u,I.gD,G.ey,F.XC,F.ZL,b.Ov],styles:["create-user-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px}mat-form-field[_ngcontent-%COMP%]{width:100%}button[_ngcontent-%COMP%]{width:100%;margin-top:10px}"]}),n})(),Ze=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-admin-delete"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-delete works!"),t.qZA())}}),n})();function Fe(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function xe(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.name),t.xp6(1),t.hij(" ",e.name," ")}}function Ne(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Especialidad"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",14,8)(6,"mat-option",13),t._uU(7,"Sin Solicitar"),t.qZA(),t.YNc(8,xe,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.specialtyControl),t.xp6(1),t.Q6J("displayWith",o.displaySpecialtyFn),t.xp6(2),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",o.specialties)}}function Ue(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function Pe(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Profesional"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",14,8),t.YNc(6,Ue,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.doctorControl),t.xp6(1),t.Q6J("displayWith",o.displayDoctorFn),t.xp6(2),t.Q6J("ngForOf",o.doctors)}}function we(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function Je(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function qe(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"D\xeda"),t.qZA(),t.TgZ(3,"mat-select",15),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDaySelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un D\xeda"),t.qZA(),t.YNc(6,we,2,2,"mat-option",9),t.qZA(),t.YNc(7,Je,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.formattedDates),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.day.errors?null:e.appointmentForm.controls.day.errors.required)}}function Me(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function Ee(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function Qe(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Hora"),t.qZA(),t.TgZ(3,"mat-select",17),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHourSelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un Horario"),t.qZA(),t.YNc(6,Me,2,2,"mat-option",9),t.qZA(),t.YNc(7,Ee,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.availableTimes),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function Ye(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Oe(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function Le(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Rama (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",18),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onBranchSelect(i))}),t.YNc(4,Ye,2,2,"mat-option",9),t.qZA(),t.YNc(5,Oe,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.specialtyFilteredBranches),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function $e(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function He(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Obra Social (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",19)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,$e,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.insurances)}}function Be(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Ie(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado del Turno (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",20)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,Be,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.appointment_status_choices)}}function ke(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Ve(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado de Pago (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",21),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.updatePaymentVisibility(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,ke,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.payment_status_choices)}}function je(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Ge(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"M\xe9todo de Pago"),t.qZA(),t.TgZ(3,"mat-select",22)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,je,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.methods)}}let Re=(()=>{class n{constructor(e,o,i,r,s,c,p,d,g,v){this.fb=e,this.doctorService=o,this.branchService=i,this.appointmentService=r,this.patientService=s,this.insuranceService=c,this.doctorScheduleService=p,this.paymentmethodservice=d,this.dialogService=g,this.router=v,this.patients=[],this.doctors=[],this.specialties=[],this.insurances=[],this.methods=[],this.doctorSchedule=[],this.specialtyFilteredDoctors=[],this.specialtyFilteredBranches=[],this.selectedSpecialty="",this.selectedBranch=0,this.selectedPatient=0,this.selectedDoctor=0,this.isPaid=null,this.formattedDates=[],this.availableTimes=[],this.finalJsonDate="",this.finalJsonHour="",this.appointment_status_choices=[{value:1,viewValue:"Pendiente"},{value:2,viewValue:"Confirmado"},{value:3,viewValue:"Finalizado"}],this.payment_status_choices=[{value:1,viewValue:"Adeuda"},{value:2,viewValue:"Pagado"}],this.patientControl=new l.NI,this.doctorControl=new l.NI({value:0,disabled:!0}),this.specialtyControl=new l.NI({value:"",disabled:!0}),this.filteredSpecialties=(0,S.of)([]),this.filteredDoctors=(0,S.of)([]),this.filteredPatients=(0,S.of)([]),this.patientName="",this.doctorName="",this.specialtytName="",this.branchName="",this.displayPatientFn=A=>{if(void 0!==this.patients){let m=this.patients.find(u=>u.id===A);return this.patientName=m?m.user.toString():"",this.patientName}},this.displaySpecialtyFn=A=>{if(void 0!==this.specialties){let m=this.specialties.find(u=>u.name===A);return this.specialtytName=m?m.name:"",this.specialtytName}},this.displayDoctorFn=A=>{if(void 0!==this.doctors){let m=this.doctors.find(u=>u.id===A);return this.doctorName=m?m.user.toString():"",this.doctorName}},this.appointmentForm=this.fb.group({day:["",l.kI.required],hour:["",l.kI.required],doctor:[null,l.kI.required],patient:[null,l.kI.required],duration:[null],specialty:[null,l.kI.required],branch:[null],health_insurance:[null],appointment_status:[null],payment_status:[null],payment_method:[null]}),this.appointmentResponse={id:0,day:new Date,hour:"",patient:0,doctor:0,payment_method:0,full_cost:0,hi_copayment:0,patient_copayment:0,specialty:0,branch:0,health_insurance:0,duration:"",appointment_status:0,payment_status:0}}ngOnInit(){var e=this;return(0,K.Z)(function*(){yield Promise.all([(0,P.z)(e.loadPatients()),(0,P.z)(e.loadPaymentMethods())]).then(()=>{e.initForm()})})()}initForm(){this.doctorService.getMyDoctorReportProfile().subscribe(e=>{e.specialty.id&&(this.specialties.push(e.specialty),this.specialtyControl.patchValue(e.specialty.name),this.selectedSpecialty=e.specialty.name),this.specialtyFilteredBranches=e.branches,this.doctors.push(e.doctor),this.doctorControl.patchValue(e.doctor.id),this.onDoctorSelect(e.doctor.id)})}loadPatients(){return this.patientService.getAllPatients().pipe((0,w.b)(e=>{e.sort((o,i)=>o.user.toString().localeCompare(i.user.toString())),this.patients=e,this.filterPatients()}))}loadPaymentMethods(){return this.paymentmethodservice.getPaymentMethods().pipe((0,w.b)(e=>{e.sort((o,i)=>o.name.localeCompare(i.name)),this.methods=e}))}onPatientSelect(e){this.selectedPatient=e,this.selectedPatient?this.selectedDoctor&&this.selectedBranch&&(this.resetForm(this.appointmentForm,{hi:!0}),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)):this.resetForm(this.appointmentForm,{specialty:!0})}onDoctorSelect(e){this.selectedDoctor=e,null!==this.selectedDoctor?(this.resetForm(this.appointmentForm,{day:!0,branch:!0}),this.doctorScheduleService.getDoctorSchedule(e).subscribe(o=>{this.doctorSchedule=o,this.formattedDates=this.formatDates(this.doctorSchedule),this.loadfilteredBranches(e)})):this.resetForm(this.appointmentForm,{day:!0,branch:!0})}onDaySelect(e){null!==this.selectedDoctor&&""!==e&&null!=e?(this.resetForm(this.appointmentForm,{hour:!0}),this.finalJsonDate=this.parseDateStringToDate(e),this.doctorScheduleService.getDoctorAvailableTime(this.selectedDoctor,this.finalJsonDate).subscribe(o=>{this.availableTimes=o.available_times})):this.resetForm(this.appointmentForm,{hour:!0})}onHourSelect(e){this.finalJsonHour=""!==e&&void 0!==e?this.getStartAppointmentHour(e):""}onBranchSelect(e){this.selectedBranch=e;let o=this.specialtyFilteredBranches.find(i=>i.id===e);this.resetForm(this.appointmentForm,{hi:!0}),o&&(this.branchName=o.name),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)}updatePaymentVisibility(e){this.isPaid=2===e,this.isPaid||this.appointmentForm.patchValue({payment_method:null})}filterPatients(){this.filteredPatients=this.patientControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterPatientsByName(e):this.patients.slice()))}filterPatientsByName(e){if(e){const o=e.toLowerCase();return this.patients.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.patients}loadfilteredBranches(e){this.branchService.getDoctorBranches(e).subscribe(o=>{if(this.specialtyFilteredBranches=o.filter(i=>i.is_active),this.specialtyFilteredBranches.length>0){let i=this.specialtyFilteredBranches.find(r=>"GENERAL"===r.name.toUpperCase());this.selectedBranch=i&&i.id?i.id:0}else this.selectedBranch=0;this.appointmentForm.patchValue({branch:this.selectedBranch}),this.loadCommonInsurances(e,this.selectedPatient,this.selectedBranch)})}loadCommonInsurances(e,o,i){this.insuranceService.getDoctorPatientCommonHI(e,o,i).subscribe(r=>{r.sort((s,c)=>s.name.localeCompare(c.name)),this.insurances=r})}formatDates(e){const o=["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"],i=["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],r=[],s=new Date;for(let c=0;c<2;c++){const p=new Date;p.setDate(1),p.setMonth(p.getMonth()+c);const d=p.getFullYear(),g=p.getMonth(),v=new Date(d,g+1,0).getDate();for(let A=0;A<v;A++){const m=new Date(d,g,A+1);if(m<s&&m.toDateString()!==s.toDateString())continue;const J=`${o[m.getDay()]} ${m.getDate()} de ${i[g]} de ${d}`,q=m.toDateString().toLocaleLowerCase().slice(0,3);e.find(M=>M.day===q)&&r.push(`${J}`)}}return r}resetForm(e,o){o&&o.specialty&&this.specialtyControl.setValue(""),o&&o.doctor&&this.doctorControl.setValue(null),o&&o.day&&(e.patchValue({day:""}),this.formattedDates=[],this.finalJsonDate=""),o&&o.hour&&(e.patchValue({hour:""}),this.availableTimes=[],this.finalJsonHour=""),o&&o.branch&&e.patchValue({branch:0}),o&&o.hi&&e.patchValue({health_insurance:null}),e.patchValue({appointment_status:null,payment_status:null,payment_method:null})}validateForm(){let e=this.appointmentForm.get("day"),o=this.appointmentForm.get("hour");return this.patientControl.value?this.specialtyControl.value?this.doctorControl.value?e&&e.value?!(!o||!o.value)||(this.dialogService.showErrorDialog('El campo "Hora "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "D\xeda "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Profesional "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Especialidad "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Paciente "no puede ser vac\xedo, por favor, asigne un valor'),!1)}parseDateStringToDate(e){const o=e.split(" ");if(o.length<6)throw new Error('Cadena de fecha incorrecta. Debe tener el formato "D\xeda n\xfamero de Mes de A\xf1o".');return`${o[5]}-${{Enero:"01",Febrero:"02",Marzo:"03",Abril:"04",Mayo:"05",Junio:"06",Julio:"07",Agosto:"08",Septiembre:"09",Octubre:"10",Noviembre:"11",Diciembre:"12"}[o[3]]}-${o[1]}`}getStartAppointmentHour(e){const o=e.split("-");if(2!==o.length)throw new Error("Datos de entrada incorrectos al querer formatear el horario del turno ");return o[0].trim()}displayPreviewAppointment(){return`Desea confirmar el turno con los siguientes datos?: <br>\n    <strong> Paciente:</strong> ${this.patientName} <br>\n    <strong> Profesional:</strong> ${this.doctorName} <br>\n    <strong> D\xeda:</strong> ${this.appointmentForm.get("day")?.value} <br>\n    <strong> Hora:</strong> ${this.appointmentForm.get("hour")?.value} <br>\n    <strong> Especialidad:</strong> ${this.specialtytName} <br>\n    <strong> Rama:</strong> ${this.branchName}<br>\n    <strong> Obra Social:</strong> ${this.findFormHi()} <br>\n    <strong> Estado del Turno:</strong> ${this.findFormAppointmentStatus()} <br>\n    <strong> Estado de Pago:</strong> ${this.findFormPaymentStatus()} <br>\n    <strong> M\xe9todo de Pago:</strong> ${this.findFormPaymentMethod()} `}findFormHi(){const e=this.appointmentForm.get("health_insurance")?.value;if(e){const o=this.insurances.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormAppointmentStatus(){const e=this.appointmentForm.get("appointment_status")?.value;if(e){const o=this.appointment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Pendiente"}return"Pendiente"}findFormPaymentStatus(){const e=this.appointmentForm.get("payment_status")?.value;if(e){const o=this.payment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Adeuda"}return"Adeuda"}findFormPaymentMethod(){const e=this.appointmentForm.get("payment_method")?.value;if(e){const o=this.methods.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}onSubmit(){if(this.validateForm()){const e=this.appointmentForm.value,o={day:this.finalJsonDate,hour:this.finalJsonHour,doctor:this.selectedDoctor,patient:this.selectedPatient};null!=e.branch&&(o.branch=e.branch),null!=e.appointment_status&&(o.appointment_status=e.appointment_status),null!=e.payment_status&&(o.payment_status=e.payment_status),null!=e.payment_method&&(o.payment_method=e.payment_method),null!=e.health_insurance&&(o.health_insurance=e.health_insurance),this.dialogService.openConfirmDialog(`${this.displayPreviewAppointment()}`).afterClosed().subscribe(r=>{r&&this.appointmentService.createDoctorAppointment(o).pipe((0,E.K)(s=>{throw console.error("Error en la solicitud:",s),this.dialogService.showErrorDialog(s.error&&s.error.non_field_errors?"Error al generar el turno: "+s.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),s})).subscribe(s=>{this.appointmentResponse=s,this.dialogService.showSuccessDialog("Turno generado exitosamente").afterClosed().subscribe(()=>{this.dialogService.openConfirmDialog("\xbfDesea generar otro turno?").afterClosed().subscribe(d=>{d?window.location.reload():this.router.navigate(["Dashboard/appointments/doctor/list"])})})})})}}onCancel(){this.router.navigate(["/Dashboard/appointments/doctor/list"])}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(l.qu),t.Y36(O.F),t.Y36(L.b),t.Y36(N),t.Y36($.e),t.Y36(H.L),t.Y36(B.J),t.Y36(V.e),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-doctor-create"]],decls:28,vars:16,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,"card"],[1,"card-header","bg-info","text-dark","text-center"],[1,"card-body"],[1,"create-user-form",3,"formGroup","ngSubmit"],["appearance","outline"],["matInput","",3,"matAutocomplete","formControl"],["autoActiveFirstOption","",3,"displayWith","optionSelected"],["auto","matAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["appearance","outline",4,"ngIf"],["type","submit",1,"btn","btn-primary"],[1,"btn","btn-secondary",3,"click"],[3,"value"],["autoActiveFirstOption","",3,"displayWith"],["formControlName","day",3,"ngModelChange"],[4,"ngIf"],["formControlName","hour",3,"ngModelChange"],["formControlName","branch",3,"ngModelChange"],["formControlName","health_insurance"],["formControlName","appointment_status"],["formControlName","payment_status",3,"ngModelChange"],["formControlName","payment_method"]],template:function(e,o){if(1&e&&(t.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h2"),t._uU(4,"Crear Turno - Profesional"),t.qZA()(),t.TgZ(5,"div",3)(6,"form",4),t.NdJ("ngSubmit",function(){return o.onSubmit()}),t.TgZ(7,"mat-form-field",5)(8,"mat-label"),t._uU(9,"Paciente"),t.qZA(),t._UZ(10,"input",6),t.TgZ(11,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(r){return o.onPatientSelect(r.option.value)}),t.YNc(13,Fe,2,2,"mat-option",9),t.ALo(14,"async"),t.qZA()(),t.YNc(15,Ne,9,5,"mat-form-field",10),t.YNc(16,Pe,7,4,"mat-form-field",10),t.YNc(17,qe,8,2,"mat-form-field",10),t.YNc(18,Qe,8,2,"mat-form-field",10),t.YNc(19,Le,6,2,"mat-form-field",10),t.YNc(20,He,7,2,"mat-form-field",10),t.YNc(21,Ie,7,2,"mat-form-field",10),t.YNc(22,Ve,7,2,"mat-form-field",10),t.YNc(23,Ge,7,2,"mat-form-field",10),t.TgZ(24,"button",11),t._uU(25,"Crear"),t.qZA(),t.TgZ(26,"button",12),t.NdJ("click",function(){return o.onCancel()}),t._uU(27,"Cancelar"),t.qZA()()()()()),2&e){const i=t.MAs(12);t.xp6(6),t.Q6J("formGroup",o.appointmentForm),t.xp6(4),t.Q6J("matAutocomplete",i)("formControl",o.patientControl),t.xp6(1),t.Q6J("displayWith",o.displayPatientFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(14,14,o.filteredPatients)),t.xp6(2),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedBranch&&o.selectedDoctor&&o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.isPaid&&o.selectedDoctor)}},dependencies:[b.sg,b.O5,U.Nt,D.KE,D.hX,D.TO,l._Y,l.Fj,l.JJ,l.JL,l.oH,l.sg,l.u,I.gD,G.ey,F.XC,F.ZL,b.Ov],styles:["create-user-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px}mat-form-field[_ngcontent-%COMP%]{width:100%}button[_ngcontent-%COMP%]{width:100%;margin-top:10px}"]}),n})(),Ke=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-doctor-delete"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-doctor-delete works!"),t.qZA())}}),n})(),ze=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-doctor-detail"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-doctor-detail works!"),t.qZA())}}),n})();function We(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Fecha"),t.qZA())}function Xe(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.day)}}function to(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Hora"),t.qZA())}function eo(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.hour)}}function oo(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Profesional"),t.qZA())}function no(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.doctor)}}function io(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Paciente"),t.qZA())}function ao(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.patient)}}function ro(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Especialidad "),t.qZA())}function so(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.specialty)}}function lo(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Especialidad - Rama "),t.qZA())}function co(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.branch)}}function po(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Obra Social"),t.qZA())}function mo(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.health_insurance)}}function uo(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Coseg. Paciente "),t.qZA())}function ho(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.patient_copayment)}}function fo(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Coseg. O.Social "),t.qZA())}function _o(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.hi_copayment)}}function go(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Estado del Turno "),t.qZA())}function Ao(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.appointment_status)}}function yo(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1," Estado del Pago "),t.qZA())}function Co(n,a){if(1&n&&(t.TgZ(0,"td",31),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.payment_status)}}function Do(n,a){1&n&&(t.TgZ(0,"th",32),t._uU(1,"Acciones"),t.qZA())}function bo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"td",31)(1,"div",33)(2,"button",34),t.NdJ("click",function(){const r=t.CHM(e).$implicit,s=t.oxw();return t.KtG(s.onEdit(r))}),t.TgZ(3,"i",5),t._uU(4,"edit"),t.qZA()(),t.TgZ(5,"button",35),t.NdJ("click",function(){const r=t.CHM(e).$implicit,s=t.oxw();return t.KtG(s.onDelete(r.id))}),t.TgZ(6,"i",5),t._uU(7,"delete"),t.qZA()()()()}}function vo(n,a){1&n&&t._UZ(0,"tr",36)}const So=function(n){return{highlight:n}};function To(n,a){1&n&&t._UZ(0,"tr",37),2&n&&t.Q6J("ngClass",t.VKq(1,So,"CONFIRMADO"===a.$implicit.appointment_status))}const Zo=function(){return[10,25,50,100]};let Fo=(()=>{class n{constructor(e,o,i){this.appointmentService=e,this.dialogService=o,this.router=i,this.displayedColumns=["day","hour","patient","branch","health_insurance","patient_copayment","hi_copayment","appointment_status","payment_status","actions"],this.appointments=[]}ngOnInit(){this.setDataTable()}setDataTable(e){let o;o=e?this.appointmentService.getDoctorsTodayAppointments(e):this.appointmentService.getDoctorAllAppointments(),o.subscribe(i=>{this.dataSource=new _.by(i),this.paginator._intl.itemsPerPageLabel="items por p\xe1gina",this.paginator._intl.firstPageLabel="primera p\xe1gina",this.paginator._intl.lastPageLabel="\xfaltima p\xe1gina",this.paginator._intl.nextPageLabel="p\xe1gina siguiente",this.paginator._intl.previousPageLabel="p\xe1gina anterior",this.dataSource.paginator=this.paginator,this.dataSource.sort=this.sort})}showAll(){this.setDataTable()}filterToday(){const e=(0,b.p6)(new Date,"yyyy-MM-dd","en-US");this.setDataTable(e)}applyFilter(e){this.dataSource.filter=e.target.value.trim(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()}onEdit(e){this.router.navigate(["Dashboard/appointments/doctor/update"],{state:{appointment:e}})}canDelete(e){let o=e.day.split("-"),i=new Date(+o[2],o[1]-1,+o[0]);return"PAGADO"!=e.payment_status.toUpperCase()&&i>new Date}onDelete(e){this.dialogService.openConfirmDialog("\xbfConfirma la eliminaci\xf3n de este turno?").afterClosed().subscribe(i=>{i&&this.appointmentService.deleteDoctorAppointment(e).pipe((0,E.K)(r=>{throw console.error("Error en la solicitud:",r),this.dialogService.showErrorDialog(r.error&&r.error.non_field_errors?"Error al eliminar el turno: "+r.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),r})).subscribe(r=>{this.setDataTable(),this.dialogService.showSuccessDialog("Turno eliminado con \xe9xito")})})}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(N),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-doctor-list"]],viewQuery:function(e,o){if(1&e&&(t.Gf(Y.NW,5),t.Gf(x.YE,5)),2&e){let i;t.iGM(i=t.CRH())&&(o.paginator=i.first),t.iGM(i=t.CRH())&&(o.sort=i.first)}},decls:61,vars:5,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,""],[1,"container-fluid"],[1,"d-flex","justify-content-start","mb-3"],[1,"btn","btn-info","me-3",3,"click"],[1,"material-symbols-outlined"],["routerLink","/Dashboard/appointments/doctor/create",1,"btn","btn-success"],[1,"example-form-field"],["matInput","",3,"keyup"],["input",""],[1,"table-responsive"],["mat-table","","matSort","",3,"dataSource"],["matColumnDef","day"],["mat-header-cell","","mat-sort-header","",4,"matHeaderCellDef"],["mat-cell","",4,"matCellDef"],["matColumnDef","hour"],["matColumnDef","doctor"],["matColumnDef","patient"],["matColumnDef","specialty"],["matColumnDef","branch"],["matColumnDef","health_insurance"],["matColumnDef","patient_copayment"],["matColumnDef","hi_copayment"],["matColumnDef","appointment_status"],["matColumnDef","payment_status"],["matColumnDef","actions"],["mat-header-cell","",4,"matHeaderCellDef"],["mat-header-row","",4,"matHeaderRowDef"],["mat-row","",3,"ngClass",4,"matRowDef","matRowDefColumns"],["showFirstLastButtons","",3,"pageSizeOptions"],["mat-header-cell","","mat-sort-header",""],["mat-cell",""],["mat-header-cell",""],[2,"display","flex","align-items","center"],["aria-label","Editar turno",1,"btn","btn-primary",3,"click"],["aria-label","Eliminar turno",1,"btn","btn-danger","ms-3",3,"click"],["mat-header-row",""],["mat-row","",3,"ngClass"]],template:function(e,o){1&e&&(t.TgZ(0,"div")(1,"div",0)(2,"h1",1),t._uU(3,"Listado de Turnos - Profesional"),t.qZA()(),t.TgZ(4,"div",2)(5,"div",3)(6,"button",4),t.NdJ("click",function(){return o.filterToday()}),t._UZ(7,"i",5),t._uU(8,"Turnos de Hoy "),t.qZA(),t.TgZ(9,"button",4),t.NdJ("click",function(){return o.showAll()}),t._UZ(10,"i",5),t._uU(11,"Todos los Turnos "),t.qZA(),t.TgZ(12,"button",6),t._UZ(13,"i",5),t._uU(14,"Crear Turno "),t.qZA()(),t.TgZ(15,"mat-form-field",7)(16,"mat-label"),t._uU(17,"Filtro M\xfaltiple"),t.qZA(),t.TgZ(18,"input",8,9),t.NdJ("keyup",function(r){return o.applyFilter(r)}),t.qZA()(),t.TgZ(20,"div",10)(21,"table",11),t.ynx(22,12),t.YNc(23,We,2,0,"th",13),t.YNc(24,Xe,2,1,"td",14),t.BQk(),t.ynx(25,15),t.YNc(26,to,2,0,"th",13),t.YNc(27,eo,2,1,"td",14),t.BQk(),t.ynx(28,16),t.YNc(29,oo,2,0,"th",13),t.YNc(30,no,2,1,"td",14),t.BQk(),t.ynx(31,17),t.YNc(32,io,2,0,"th",13),t.YNc(33,ao,2,1,"td",14),t.BQk(),t.ynx(34,18),t.YNc(35,ro,2,0,"th",13),t.YNc(36,so,2,1,"td",14),t.BQk(),t.ynx(37,19),t.YNc(38,lo,2,0,"th",13),t.YNc(39,co,2,1,"td",14),t.BQk(),t.ynx(40,20),t.YNc(41,po,2,0,"th",13),t.YNc(42,mo,2,1,"td",14),t.BQk(),t.ynx(43,21),t.YNc(44,uo,2,0,"th",13),t.YNc(45,ho,2,1,"td",14),t.BQk(),t.ynx(46,22),t.YNc(47,fo,2,0,"th",13),t.YNc(48,_o,2,1,"td",14),t.BQk(),t.ynx(49,23),t.YNc(50,go,2,0,"th",13),t.YNc(51,Ao,2,1,"td",14),t.BQk(),t.ynx(52,24),t.YNc(53,yo,2,0,"th",13),t.YNc(54,Co,2,1,"td",14),t.BQk(),t.ynx(55,25),t.YNc(56,Do,2,0,"th",26),t.YNc(57,bo,8,0,"td",14),t.BQk(),t.YNc(58,vo,1,0,"tr",27),t.YNc(59,To,1,3,"tr",28),t.qZA()(),t._UZ(60,"mat-paginator",29),t.qZA()()),2&e&&(t.xp6(21),t.Q6J("dataSource",o.dataSource),t.xp6(37),t.Q6J("matHeaderRowDef",o.displayedColumns),t.xp6(1),t.Q6J("matRowDefColumns",o.displayedColumns),t.xp6(1),t.Q6J("pageSizeOptions",t.DdM(4,Zo)))},dependencies:[b.mk,T.rH,_.BZ,_.fO,_.as,_.w1,_.Dz,_.nj,_.ge,_.ev,_.XQ,_.Gk,Y.NW,x.YE,x.nU,U.Nt,D.KE,D.hX],styles:[".example-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.mat-elevation-z8[_ngcontent-%COMP%]{background-color:#f5f5f5}button[_ngcontent-%COMP%]{min-height:20px;text-align:left}.btn-icon[_ngcontent-%COMP%]{margin-right:10px;color:#fff}.material-icons[_ngcontent-%COMP%]{margin-right:10px;vertical-align:middle}.highlight[_ngcontent-%COMP%]{background-color:#00ff0035}"]}),n})();var z=f(7392),W=f(266);function xo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function No(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.name),t.xp6(1),t.hij(" ",e.name," ")}}function Uo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Especialidad"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onSpecialtySelect(i.option.value))}),t.TgZ(6,"mat-option",13),t._uU(7,"Sin Solicitar"),t.qZA(),t.YNc(8,No,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.specialtyControl),t.xp6(1),t.Q6J("displayWith",o.displaySpecialtyFn),t.xp6(2),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",o.specialties)}}function Po(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function wo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Profesional"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDoctorSelect(i.option.value))}),t.YNc(6,Po,2,2,"mat-option",9),t.ALo(7,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.doctorControl),t.xp6(1),t.Q6J("displayWith",o.displayDoctorFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(7,4,o.filteredDoctors))}}function Jo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function qo(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function Mo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"D\xeda"),t.qZA(),t.TgZ(3,"mat-select",14),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDaySelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un D\xeda"),t.qZA(),t.YNc(6,Jo,2,2,"mat-option",9),t.qZA(),t.YNc(7,qo,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.formattedDates),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.day.errors?null:e.appointmentForm.controls.day.errors.required)}}function Eo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function Qo(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function Yo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Hora"),t.qZA(),t.TgZ(3,"mat-select",16),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHourSelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un Horario"),t.qZA(),t.YNc(6,Eo,2,2,"mat-option",9),t.qZA(),t.YNc(7,Qo,2,0,"mat-error",15),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.availableTimes),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function Oo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Lo(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Rama (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",17),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onBranchSelect(i))}),t.YNc(4,Oo,2,2,"mat-option",9),t.qZA(),t.TgZ(5,"mat-icon",18),t._uU(6,"warning"),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.specialtyFilteredBranches)}}function $o(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Ho(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Obra Social (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",19),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHISelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,$o,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.insurances)}}function Bo(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1," El costo no puede ser un valor negativo "),t.qZA())}function Io(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Costo (Opcional)"),t.qZA(),t._UZ(3,"input",20),t.YNc(4,Bo,2,0,"mat-error",15),t.qZA()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngIf",e.appointmentForm.get("full_cost").hasError("min"))}}function ko(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Vo(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado del Turno (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",21),t.YNc(4,ko,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.appointment_status_choices)}}function jo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.value),t.xp6(1),t.hij(" ",e.viewValue," ")}}function Go(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Estado de Pago (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",22),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.updatePaymentVisibility(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,jo,2,2,"mat-option",9),t.qZA()()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",1),t.xp6(2),t.Q6J("ngForOf",e.payment_status_choices)}}function Ro(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function Ko(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"M\xe9todo de Pago"),t.qZA(),t.TgZ(3,"mat-select",23)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,Ro,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.methods)}}let zo=(()=>{class n{constructor(e,o,i,r,s,c,p,d,g,v,A,m){this.fb=e,this.doctorService=o,this.branchService=i,this.specialtyService=r,this.appointmentService=s,this.patientService=c,this.paymentmethodservice=p,this.insuranceService=d,this.specialtyFilterService=g,this.doctorScheduleService=v,this.dialogService=A,this.router=m,this.patients=[],this.doctors=[],this.specialties=[],this.methods=[],this.insurances=[],this.doctorSchedule=[],this.specialtyFilteredDoctors=[],this.specialtyFilteredBranches=[],this.selectedSpecialty=0,this.selectedBranch=0,this.selectedPatient=0,this.selectedDoctor=0,this.isPaid=null,this.formattedDates=[],this.availableTimes=[],this.finalJsonDate="",this.finalJsonHour="",this.appointment_status_choices=[{value:1,viewValue:"Pendiente"},{value:2,viewValue:"Confirmado"},{value:3,viewValue:"Finalizado"}],this.payment_status_choices=[{value:1,viewValue:"Adeuda"},{value:2,viewValue:"Pagado"}],this.recoveredHour="",this.recoveredDate="",this.doctorControl=new l.NI,this.patientControl=new l.NI,this.specialtyControl=new l.NI,this.filteredSpecialties=(0,S.of)([]),this.filteredDoctors=(0,S.of)([]),this.filteredPatients=(0,S.of)([]),this.patientName="",this.doctorName="",this.specialtytName="",this.branchName="",this.displayDoctorFn=u=>{if(void 0!==this.specialtyFilteredDoctors){let h=this.specialtyFilteredDoctors.find(y=>y.id===u);return this.doctorName=h?h.user.toString():"",this.doctorName}},this.displayPatientFn=u=>{if(void 0!==this.patients){let h=this.patients.find(y=>y.id===u);return this.patientName=h?h.user.toString():"",this.patientName}},this.displaySpecialtyFn=u=>{if(void 0!==this.specialties){let h=this.specialties.find(y=>y.name===u);return this.specialtytName=h?h.name:"",this.specialtytName}},this.appointmentForm=this.fb.group({day:["",l.kI.required],hour:["",l.kI.required],doctor:[null,l.kI.required],patient:[null,l.kI.required],specialty:[null,l.kI.required],branch:[null],appointment_status:[null],payment_status:[null],payment_method:[null],full_cost:[null,l.kI.min(0)],health_insurance:[null]}),this.appointmentResponse={id:0,day:new Date,hour:"",patient:0,doctor:0,payment_method:0,full_cost:0,hi_copayment:0,patient_copayment:0,specialty:0,branch:0,health_insurance:0,duration:"",appointment_status:0,payment_status:0}}ngOnInit(){var e=this;return(0,K.Z)(function*(){history.state.appointment&&(yield Promise.all([(0,P.z)(e.loadDoctors()),(0,P.z)(e.loadSpecialties()),(0,P.z)(e.loadPatients()),(0,P.z)(e.loadPaymentMethods())]).then(()=>{e.initForm(history.state.appointment)}))})()}initForm(e){this.appointmentService.getAdminOneAppointment(e.id).subscribe(o=>{this.patientControl.patchValue(o.patient),this.patientControl.disable(),this.onPatientSelect(o.patient),this.specialtyControl.patchValue(e.specialty),this.specialtyControl.disable(),this.onSpecialtySelect(e.specialty),this.doctorControl.patchValue(o.doctor),this.doctorControl.disable(),this.recoveredDate=this.recoverDayFormat(o.day),this.onDoctorSelect(o.doctor),this.appointmentForm.patchValue({day:this.recoveredDate}),this.onDaySelect(this.recoveredDate),this.recoveredHour=this.recoveryHourFormat(o.hour,o.duration),this.appointmentForm.patchValue({hour:this.recoveredHour}),this.onHourSelect(this.recoveredHour),this.appointmentForm.patchValue({branch:o.branch,appointment_status:o.appointment_status,payment_status:o.payment_status,payment_method:o.payment_method,full_cost:o.full_cost,health_insurance:o.health_insurance}),this.appointmentForm.get("full_cost")?.disable(),this.appointmentForm.get("health_insurance")?.disable(),this.selectedBranch=o.branch,this.isPaid=2===o.payment_status})}loadDoctors(){return this.doctorService.getDoctors().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.doctors=o}))}loadSpecialties(){return this.specialtyService.getSpecialities().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.name.localeCompare(r.name)),this.specialties=o,this.filterSpecialties()}))}loadPatients(){return this.patientService.getAllPatients().pipe((0,w.b)(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.patients=o,this.filterPatients()}))}loadPaymentMethods(){return this.paymentmethodservice.getPaymentMethods().pipe((0,w.b)(e=>{e.sort((o,i)=>o.name.localeCompare(i.name)),this.methods=e}))}onSpecialtySelect(e){this.selectedSpecialty=e,null!==e?(this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0}),this.loadfilteredDoctors(this.selectedSpecialty),this.filterDoctors()):this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0})}onDoctorSelect(e){this.selectedDoctor=e,null!==this.selectedDoctor?(this.resetForm(this.appointmentForm,{day:!0,branch:!0}),this.doctorScheduleService.getDoctorSchedule(e).subscribe(o=>{this.doctorSchedule=o,this.formattedDates=this.formatDates(this.doctorSchedule),this.formattedDates.unshift(this.recoveredDate),this.loadfilteredBranches(e)})):this.resetForm(this.appointmentForm,{day:!0,branch:!0})}onDaySelect(e){null!==this.selectedDoctor&&""!==e&&null!=e?(this.resetForm(this.appointmentForm,{hour:!0}),this.finalJsonDate=this.parseDateStringToDate(e),this.doctorScheduleService.getDoctorAvailableTime(this.selectedDoctor,this.finalJsonDate).subscribe(o=>{this.availableTimes=o.available_times,this.availableTimes.unshift(this.recoveredHour)})):this.resetForm(this.appointmentForm,{hour:!0})}onHourSelect(e){this.finalJsonHour=""!==e&&void 0!==e?this.getStartAppointmentHour(e):""}onPatientSelect(e){this.selectedPatient=e,this.selectedPatient?this.selectedDoctor&&this.selectedBranch&&(this.resetForm(this.appointmentForm,{hi:!0}),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)):this.resetForm(this.appointmentForm,{specialty:!0})}onBranchSelect(e){this.selectedBranch=e;let o=this.specialtyFilteredBranches.find(i=>i.id===e);this.resetForm(this.appointmentForm,{hi:!0}),o&&(this.branchName=o.name),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)}onHISelect(e){this.resetForm(this.appointmentForm)}updatePaymentVisibility(e){this.isPaid=2===e,this.isPaid||this.appointmentForm.patchValue({payment_method:null})}filterPatients(){this.filteredPatients=this.patientControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterPatientsByName(e):this.patients.slice()))}filterPatientsByName(e){if(e){const o=e.toLowerCase();return this.patients.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.patients}loadfilteredDoctors(e){this.specialtyFilteredDoctors=this.specialtyFilterService.filterDoctorsBySpecialty(this.doctors,e)}filterDoctors(){this.filteredDoctors=this.doctorControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterDoctorsBySpecialty(e):this.specialtyFilteredDoctors.slice()))}filterDoctorsBySpecialty(e){if(e){const o=e.toLowerCase();return this.specialtyFilteredDoctors.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.specialtyFilteredDoctors}filterSpecialties(){this.filteredSpecialties=this.specialtyControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterSpecialtiesByName(e):this.specialties.slice()))}filterSpecialtiesByName(e){if(e){const o=e.toLowerCase();return this.specialties.some(r=>r.name.toLowerCase()===o)?this.specialties:this.specialties.filter(r=>r.name.toString().toLowerCase().includes(o))}return this.specialties}loadfilteredBranches(e){this.branchService.getDoctorBranches(e).subscribe(o=>{let i=o.filter(r=>r.is_active);i.sort((r,s)=>r.name.localeCompare(s.name)),this.specialtyFilteredBranches=i,this.loadCommonInsurances(e,this.selectedPatient,this.selectedBranch)})}loadCommonInsurances(e,o,i){this.insuranceService.getDoctorPatientCommonHI(e,o,i).subscribe(r=>{let s=r.filter(c=>c.is_active);s.sort((c,p)=>c.name.localeCompare(p.name)),this.insurances=s})}formatDates(e){const o=["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"],i=["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],r=[],s=new Date;for(let c=0;c<2;c++){const p=new Date;p.setDate(1),p.setMonth(p.getMonth()+c);const d=p.getFullYear(),g=p.getMonth(),v=new Date(d,g+1,0).getDate();for(let A=0;A<v;A++){const m=new Date(d,g,A+1);if(m<s&&m.toDateString()!==s.toDateString())continue;const J=`${o[m.getDay()]} ${m.getDate()} de ${i[g]} de ${d}`,q=m.toDateString().toLocaleLowerCase().slice(0,3);e.find(M=>M.day===q)&&r.push(`${J}`)}}return r}recoverDayFormat(e){let o=e.toString().split("-"),i=new Date(parseInt(o[0]),parseInt(o[1])-1,parseInt(o[2]));return`${["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"][i.getDay()]} ${i.getDate()} de ${["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"][i.getMonth()]} de ${i.getFullYear()}`}recoveryHourFormat(e,o){let i=new Date(`1970-01-01T${e}Z`),r=new Date(`1970-01-01T${o}Z`),s=new Date(i.getTime()+r.getTime());return`${i.toISOString().slice(11,16)} - ${s.toISOString().slice(11,16)}`}resetForm(e,o){o&&o.specialty&&this.specialtyControl.setValue(0),o&&o.doctor&&this.doctorControl.setValue(null),o&&o.day&&(e.patchValue({day:""}),this.formattedDates=[],this.finalJsonDate=""),o&&o.hour&&(e.patchValue({hour:""}),this.availableTimes=[],this.finalJsonHour=""),o&&o.branch&&e.patchValue({branch:0}),o&&o.hi&&e.patchValue({health_insurance:null}),e.patchValue({payment_method:null,full_cost:null,appointment_status:1,payment_status:1})}validateForm(){let e=this.appointmentForm.get("day"),o=this.appointmentForm.get("hour");return this.patientControl.value?this.specialtyControl.value?this.doctorControl.value?e&&e.value?!(!o||!o.value)||(this.dialogService.showErrorDialog('El campo "Hora "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "D\xeda "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Profesional "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Especialidad "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Paciente "no puede ser vac\xedo, por favor, asigne un valor'),!1)}parseDateStringToDate(e){const o=e.split(" ");if(o.length<6)throw new Error('Cadena de fecha incorrecta. Debe tener el formato "D\xeda n\xfamero de Mes de A\xf1o".');return`${o[5]}-${{Enero:"01",Febrero:"02",Marzo:"03",Abril:"04",Mayo:"05",Junio:"06",Julio:"07",Agosto:"08",Septiembre:"09",Octubre:"10",Noviembre:"11",Diciembre:"12"}[o[3]]}-${o[1]}`}getStartAppointmentHour(e){const o=e.split("-");if(2!==o.length)throw new Error("Datos de entrada incorrectos al querer formatear el horario del turno ");return o[0].trim()}displayPreviewAppointment(){return`Desea confirmar el turno con los siguientes datos?: <br>\n    <strong> Paciente: </strong> ${this.patientName} <br>\n    <strong> Profesional: </strong> ${this.doctorName} <br>\n    <strong> D\xeda: </strong> ${this.appointmentForm.get("day")?.value} <br>\n    <strong> Hora: </strong> ${this.appointmentForm.get("hour")?.value} <br>\n    <strong> Especialidad: </strong> ${this.specialtytName} <br>\n    <strong> Rama: </strong> ${this.branchName} <br>\n    <strong> Obra Social: </strong> ${this.findFormHi()} <br>\n    <strong> Estado del Turno: </strong> ${this.findFormAppointmentStatus()} <br>\n    <strong> Estado de Pago: </strong> ${this.findFormPaymentStatus()} <br>\n    <strong> Costo: </strong> ${this.findFormFullCost()} <br>\n    <strong> M\xe9todo de Pago: </strong> ${this.findFormPaymentMethod()} <br>`}findFormHi(){const e=this.appointmentForm.get("health_insurance")?.value;if(e){const o=this.insurances.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormAppointmentStatus(){const e=this.appointmentForm.get("appointment_status")?.value;if(e){const o=this.appointment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Pendiente"}return"Pendiente"}findFormPaymentStatus(){const e=this.appointmentForm.get("payment_status")?.value;if(e){const o=this.payment_status_choices.find(i=>i.value===e);return o?o.viewValue:"Adeuda"}return"Adeuda"}findFormPaymentMethod(){const e=this.appointmentForm.get("payment_method")?.value;if(e){const o=this.methods.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}findFormFullCost(){const e=this.appointmentForm.get("full_cost")?.value;return e?e.toString():"Sin especificar"}onSubmit(){if(this.validateForm()){const e=this.appointmentForm.value,o={day:this.finalJsonDate,hour:this.finalJsonHour,doctor:this.selectedDoctor,patient:this.selectedPatient,payment_method:e.payment_method};null!=e.branch&&(o.branch=e.branch),null!=e.full_cost&&(o.full_cost=e.full_cost),null!=e.duration&&(o.duration=e.duration),null!=e.appointment_status&&(o.appointment_status=e.appointment_status),null!=e.payment_status&&(o.payment_status=e.payment_status),null!=e.health_insurance&&(o.health_insurance=e.health_insurance),this.dialogService.openConfirmDialog(`${this.displayPreviewAppointment()}`).afterClosed().subscribe(r=>{r&&this.appointmentService.updateAdminAppointment(history.state.appointment.id,o).pipe((0,E.K)(s=>{throw console.error("Error en la solicitud:",s),this.dialogService.showErrorDialog(s.error&&s.error.non_field_errors?"Error al generar el turno: "+s.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),s})).subscribe(s=>{this.appointmentResponse=s,this.dialogService.showSuccessDialog("Turno Actualizado exitosamente").afterClosed().subscribe(()=>{this.router.navigate(["Dashboard/appointments/doctor/list"])})})})}}onCancel(){this.router.navigate(["Dashboard/appointments/doctor/list"])}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(l.qu),t.Y36(O.F),t.Y36(L.b),t.Y36(k.d),t.Y36(N),t.Y36($.e),t.Y36(V.e),t.Y36(H.L),t.Y36(j.C),t.Y36(B.J),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-doctor-update"]],decls:29,vars:17,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,"card"],[1,"card-header","bg-info","text-dark","text-center"],[1,"card-body"],[1,"create-user-form",3,"formGroup","ngSubmit"],["appearance","outline"],["matInput","",3,"matAutocomplete","formControl"],["autoActiveFirstOption","",3,"displayWith","optionSelected"],["auto","matAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["appearance","outline",4,"ngIf"],["type","submit",1,"btn","btn-primary"],[1,"btn","btn-secondary",3,"click"],[3,"value"],["formControlName","day",3,"ngModelChange"],[4,"ngIf"],["formControlName","hour",3,"ngModelChange"],["formControlName","branch",3,"ngModelChange"],["matSuffix","","id","warningIconBranch","matTooltip","Al actualizar este campo, se pueden ajustar los costos y la obra social. Las tarifas y las coberturas var\xedan seg\xfan la rama.\u201d"],["formControlName","health_insurance",3,"ngModelChange"],["matInput","","formControlName","full_cost","type","number","id","full_cost"],["formControlName","appointment_status"],["formControlName","payment_status",3,"ngModelChange"],["formControlName","payment_method"]],template:function(e,o){if(1&e&&(t.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h2"),t._uU(4,"Actualizar Turno - Profesional"),t.qZA()(),t.TgZ(5,"div",3)(6,"form",4),t.NdJ("ngSubmit",function(){return o.onSubmit()}),t.TgZ(7,"mat-form-field",5)(8,"mat-label"),t._uU(9,"Paciente"),t.qZA(),t._UZ(10,"input",6),t.TgZ(11,"mat-autocomplete",7,8),t.NdJ("optionSelected",function(r){return o.onPatientSelect(r.option.value)}),t.YNc(13,xo,2,2,"mat-option",9),t.ALo(14,"async"),t.qZA()(),t.YNc(15,Uo,9,5,"mat-form-field",10),t.YNc(16,wo,8,6,"mat-form-field",10),t.YNc(17,Mo,8,2,"mat-form-field",10),t.YNc(18,Yo,8,2,"mat-form-field",10),t.YNc(19,Lo,7,1,"mat-form-field",10),t.YNc(20,Ho,7,2,"mat-form-field",10),t.YNc(21,Io,5,1,"mat-form-field",10),t.YNc(22,Vo,5,1,"mat-form-field",10),t.YNc(23,Go,7,2,"mat-form-field",10),t.YNc(24,Ko,7,2,"mat-form-field",10),t.TgZ(25,"button",11),t._uU(26,"Actualizar"),t.qZA(),t.TgZ(27,"button",12),t.NdJ("click",function(){return o.onCancel()}),t._uU(28,"Cancelar"),t.qZA()()()()()),2&e){const i=t.MAs(12);t.xp6(6),t.Q6J("formGroup",o.appointmentForm),t.xp6(4),t.Q6J("matAutocomplete",i)("formControl",o.patientControl),t.xp6(1),t.Q6J("displayWith",o.displayPatientFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(14,15,o.filteredPatients)),t.xp6(2),t.Q6J("ngIf",o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedBranch&&o.selectedDoctor&&o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.isPaid&&o.selectedSpecialty&&o.selectedDoctor)}},dependencies:[b.sg,b.O5,U.Nt,D.KE,D.hX,D.TO,D.R9,l._Y,l.Fj,l.wV,l.JJ,l.JL,l.oH,l.sg,l.u,z.Hw,I.gD,G.ey,F.XC,F.ZL,W.gM,b.Ov],styles:["create-user-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px}mat-form-field[_ngcontent-%COMP%]{width:100%}button[_ngcontent-%COMP%]{width:100%;margin-top:10px}#warningIconBranch[_ngcontent-%COMP%]{color:#ff0}"]}),n})();function Wo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function Xo(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.name),t.xp6(1),t.hij(" ",e.name," ")}}function tn(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Especialidad"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",14,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onSpecialtySelect(i.option.value))}),t.TgZ(6,"mat-option",13),t._uU(7,"Sin Solicitar"),t.qZA(),t.YNc(8,Xo,2,2,"mat-option",9),t.ALo(9,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.specialtyControl),t.xp6(1),t.Q6J("displayWith",o.displaySpecialtyFn),t.xp6(2),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",t.lcZ(9,5,o.filteredSpecialties))}}function en(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.user," ")}}function on(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Profesional"),t.qZA(),t._UZ(3,"input",6),t.TgZ(4,"mat-autocomplete",14,8),t.NdJ("optionSelected",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDoctorSelect(i.option.value))}),t.YNc(6,en,2,2,"mat-option",9),t.ALo(7,"async"),t.qZA()()}if(2&n){const e=t.MAs(5),o=t.oxw();t.xp6(3),t.Q6J("matAutocomplete",e)("formControl",o.doctorControl),t.xp6(1),t.Q6J("displayWith",o.displayDoctorFn),t.xp6(2),t.Q6J("ngForOf",t.lcZ(7,4,o.filteredDoctors))}}function nn(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function an(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function rn(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"D\xeda"),t.qZA(),t.TgZ(3,"mat-select",15),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onDaySelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un D\xeda"),t.qZA(),t.YNc(6,nn,2,2,"mat-option",9),t.qZA(),t.YNc(7,an,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.formattedDates),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.day.errors?null:e.appointmentForm.controls.day.errors.required)}}function sn(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e),t.xp6(1),t.hij(" ",e," ")}}function ln(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function cn(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Hora"),t.qZA(),t.TgZ(3,"mat-select",17),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onHourSelect(i))}),t.TgZ(4,"mat-option",13),t._uU(5,"Selecciona un Horario"),t.qZA(),t.YNc(6,sn,2,2,"mat-option",9),t.qZA(),t.YNc(7,ln,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(6),t.Q6J("ngForOf",e.availableTimes),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function pn(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function mn(n,a){1&n&&(t.TgZ(0,"mat-error"),t._uU(1,"Este campo es requerido"),t.qZA())}function dn(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Rama (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",18),t.NdJ("ngModelChange",function(i){t.CHM(e);const r=t.oxw();return t.KtG(r.onBranchSelect(i))}),t.YNc(4,pn,2,2,"mat-option",9),t.qZA(),t.YNc(5,mn,2,0,"mat-error",16),t.qZA()}if(2&n){const e=t.oxw();t.xp6(4),t.Q6J("ngForOf",e.specialtyFilteredBranches),t.xp6(1),t.Q6J("ngIf",null==e.appointmentForm.controls.hour.errors?null:e.appointmentForm.controls.hour.errors.required)}}function un(n,a){if(1&n&&(t.TgZ(0,"mat-option",13),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.Q6J("value",e.id),t.xp6(1),t.hij(" ",e.name," ")}}function hn(n,a){if(1&n&&(t.TgZ(0,"mat-form-field",5)(1,"mat-label"),t._uU(2,"Obra Social (Opcional)"),t.qZA(),t.TgZ(3,"mat-select",19)(4,"mat-option",13),t._uU(5,"Sin Solicitar"),t.qZA(),t.YNc(6,un,2,2,"mat-option",9),t.qZA()()),2&n){const e=t.oxw();t.xp6(4),t.Q6J("value",null),t.xp6(2),t.Q6J("ngForOf",e.insurances)}}let fn=(()=>{class n{constructor(e,o,i,r,s,c,p,d,g,v,A){this.fb=e,this.doctorService=o,this.branchService=i,this.specialtyService=r,this.appointmentService=s,this.patientService=c,this.insuranceService=p,this.specialtyFilterService=d,this.doctorScheduleService=g,this.dialogService=v,this.router=A,this.patients=[],this.doctors=[],this.specialties=[],this.insurances=[],this.doctorSchedule=[],this.specialtyFilteredDoctors=[],this.specialtyFilteredBranches=[],this.selectedSpecialty=0,this.selectedBranch=0,this.selectedPatient=0,this.selectedDoctor=0,this.formattedDates=[],this.availableTimes=[],this.finalJsonDate="",this.finalJsonHour="",this.doctorControl=new l.NI,this.patientControl=new l.NI({value:0,disabled:!0}),this.specialtyControl=new l.NI,this.filteredSpecialties=(0,S.of)([]),this.filteredDoctors=(0,S.of)([]),this.patientName="",this.doctorName="",this.specialtytName="",this.branchName="",this.displayDoctorFn=m=>{if(void 0!==this.specialtyFilteredDoctors){let u=this.specialtyFilteredDoctors.find(h=>h.id===m);return this.doctorName=u?u.user.toString():"",this.doctorName}},this.displayPatientFn=m=>{if(void 0!==this.patients){let u=this.patients.find(h=>h.id===m);return this.patientName=u?u.user.toString():"",this.patientName}},this.displaySpecialtyFn=m=>{if(void 0!==this.specialties){let u=this.specialties.find(h=>h.name===m);return this.specialtytName=u?u.name:"",this.specialtytName}},this.appointmentForm=this.fb.group({patient:[null,l.kI.required],specialty:[null,l.kI.required],doctor:[null,l.kI.required],day:["",l.kI.required],hour:["",l.kI.required],branch:[null],health_insurance:[null]}),this.appointmentResponse={id:0,day:new Date,hour:"",patient:0,doctor:0,payment_method:0,full_cost:0,hi_copayment:0,patient_copayment:0,specialty:0,branch:0,health_insurance:0,duration:"",appointment_status:0,payment_status:0}}ngOnInit(){this.loadDoctors(),this.loadSpecialties(),this.loadPatient()}loadDoctors(){this.doctorService.getDoctors().subscribe(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.user.toString().localeCompare(r.user.toString())),this.doctors=o})}loadSpecialties(){this.specialtyService.getSpecialities().subscribe(e=>{let o=e.filter(i=>i.is_active);o.sort((i,r)=>i.name.localeCompare(r.name)),this.specialties=o,this.filterSpecialties()})}loadPatient(){this.patientService.getCurrentPatient().subscribe(e=>{e.is_active?(this.patients.push(e),this.patientControl.patchValue(e.id),this.selectedPatient=e.id,this.patientName=e.user.toString()):(this.dialogService.showErrorDialog('Su perfil de "Paciente" est\xe1 desactivado, por favor contacte al administrador'),this.router.navigate(["Dashboard/"]))})}onSpecialtySelect(e){this.selectedSpecialty=e,null!==e?(this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0}),this.loadfilteredDoctors(this.selectedSpecialty),this.filterDoctors()):this.resetForm(this.appointmentForm,{doctor:!0,day:!0,branch:!0})}onDoctorSelect(e){this.selectedDoctor=e,null!==this.selectedDoctor?(this.resetForm(this.appointmentForm,{day:!0,branch:!0}),this.doctorScheduleService.getDoctorSchedule(e).subscribe(o=>{this.doctorSchedule=o,this.formattedDates=this.formatDates(this.doctorSchedule),this.loadfilteredBranches(e)})):this.resetForm(this.appointmentForm,{day:!0,branch:!0})}onDaySelect(e){null!==this.selectedDoctor&&""!==e&&null!=e?(this.resetForm(this.appointmentForm,{hour:!0}),this.finalJsonDate=this.parseDateStringToDate(e),this.doctorScheduleService.getDoctorAvailableTime(this.selectedDoctor,this.finalJsonDate).subscribe(o=>{this.availableTimes=o.available_times})):this.resetForm(this.appointmentForm,{hour:!0})}onHourSelect(e){this.finalJsonHour=""!==e&&void 0!==e?this.getStartAppointmentHour(e):""}onBranchSelect(e){this.selectedBranch=e;let o=this.specialtyFilteredBranches.find(i=>i.id===e);this.resetForm(this.appointmentForm,{hi:!0}),o&&(this.branchName=o.name),this.loadCommonInsurances(this.selectedDoctor,this.selectedPatient,this.selectedBranch)}loadfilteredDoctors(e){this.specialtyFilteredDoctors=this.specialtyFilterService.filterDoctorsBySpecialty(this.doctors,e)}filterDoctors(){this.filteredDoctors=this.doctorControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterDoctorsBySpecialty(e):this.specialtyFilteredDoctors.slice()))}filterDoctorsBySpecialty(e){if(e){const o=e.toLowerCase();return this.specialtyFilteredDoctors.filter(i=>i.user.toString().toLowerCase().includes(o))}return this.specialtyFilteredDoctors}filterSpecialties(){this.filteredSpecialties=this.specialtyControl.valueChanges.pipe((0,Z.O)(""),(0,C.U)(e=>"string"==typeof e?e:e?e.name:""),(0,C.U)(e=>e?this.filterSpecialtiesByName(e):this.specialties.slice()))}filterSpecialtiesByName(e){if(e){const o=e.toLowerCase();return this.specialties.some(r=>r.name.toLowerCase()===o)?this.specialties:this.specialties.filter(r=>r.name.toString().toLowerCase().includes(o))}return this.specialties}loadfilteredBranches(e){this.branchService.getDoctorBranches(e).subscribe(o=>{if(this.specialtyFilteredBranches=o.filter(i=>i.is_active),this.specialtyFilteredBranches.length>0){let i=this.specialtyFilteredBranches.find(r=>"GENERAL"===r.name.toUpperCase());this.selectedBranch=i&&i.id?i.id:0}else this.selectedBranch=0;this.appointmentForm.patchValue({branch:this.selectedBranch}),this.loadCommonInsurances(e,this.selectedPatient,this.selectedBranch)})}loadCommonInsurances(e,o,i){this.insuranceService.getDoctorPatientCommonHI(e,o,i).subscribe(r=>{r.sort((s,c)=>s.name.localeCompare(c.name)),this.insurances=r})}formatDates(e){const o=["Domingo","Lunes","Martes","Mi\xe9rcoles","Jueves","Viernes","S\xe1bado"],i=["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],r=[],s=new Date;for(let c=0;c<2;c++){const p=new Date;p.setDate(1),p.setMonth(p.getMonth()+c);const d=p.getFullYear(),g=p.getMonth(),v=new Date(d,g+1,0).getDate();for(let A=0;A<v;A++){const m=new Date(d,g,A+1);if(m<s&&m.toDateString()!==s.toDateString())continue;const J=`${o[m.getDay()]} ${m.getDate()} de ${i[g]} de ${d}`,q=m.toDateString().toLocaleLowerCase().slice(0,3);e.find(M=>M.day===q)&&r.push(`${J}`)}}return r}resetForm(e,o){o&&o.specialty&&this.specialtyControl.setValue(0),o&&o.doctor&&this.doctorControl.setValue(null),o&&o.day&&(e.patchValue({day:""}),this.formattedDates=[],this.finalJsonDate=""),o&&o.hour&&(e.patchValue({hour:""}),this.availableTimes=[],this.finalJsonHour=""),o&&o.branch&&e.patchValue({branch:0}),o&&o.hi&&e.patchValue({health_insurance:null})}validateForm(){let e=this.appointmentForm.get("day"),o=this.appointmentForm.get("hour");return this.patientControl.value?this.specialtyControl.value?this.doctorControl.value?e&&e.value?!(!o||!o.value)||(this.dialogService.showErrorDialog('El campo "Hora "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "D\xeda "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Profesional "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Especialidad "no puede ser vac\xedo, por favor, asigne un valor'),!1):(this.dialogService.showErrorDialog('El campo "Paciente "no puede ser vac\xedo, por favor, asigne un valor'),!1)}parseDateStringToDate(e){const o=e.split(" ");if(o.length<6)throw new Error('Cadena de fecha incorrecta. Debe tener el formato "D\xeda n\xfamero de Mes de A\xf1o".');return`${o[5]}-${{Enero:"01",Febrero:"02",Marzo:"03",Abril:"04",Mayo:"05",Junio:"06",Julio:"07",Agosto:"08",Septiembre:"09",Octubre:"10",Noviembre:"11",Diciembre:"12"}[o[3]]}-${o[1]}`}getStartAppointmentHour(e){const o=e.split("-");if(2!==o.length)throw new Error("Datos de entrada incorrectos al querer formatear el horario del turno ");return o[0].trim()}displayPreviewAppointment(){return`Desea confirmar el turno con los siguientes datos?: <br>\n    <strong> Paciente: </strong> ${this.patientName}<br>\n    <strong> Profesional: </strong> ${this.doctorName}<br>\n    <strong> D\xeda: </strong> ${this.appointmentForm.get("day")?.value}<br>\n    <strong> Hora: </strong> ${this.appointmentForm.get("hour")?.value}<br>\n    <strong> Especialidad: </strong> ${this.specialtytName}<br>\n    <strong> Rama: </strong> ${this.branchName}<br>\n    <strong>Obra Social: </strong> ${this.findFormHi()}<br>`.replace(/\n/g,"")}findFormHi(){const e=this.appointmentForm.get("health_insurance")?.value;if(e){const o=this.insurances.find(i=>i.id===e);return o?o.name:"Sin Especificar"}return"Sin Especificar"}onSubmit(){if(this.validateForm()){const e=this.appointmentForm.value,o={day:this.finalJsonDate,hour:this.finalJsonHour,doctor:this.selectedDoctor,patient:this.selectedPatient};null!=e.branch&&(o.branch=e.branch),null!=e.health_insurance&&(o.health_insurance=e.health_insurance),this.dialogService.openConfirmDialog(`${this.displayPreviewAppointment()}`).afterClosed().subscribe(r=>{r&&this.appointmentService.createPatientAppointment(o).pipe((0,E.K)(s=>{throw console.error("Error en la solicitud:",s),this.dialogService.showErrorDialog(s.error&&s.error.non_field_errors?"Error al generar el turno: "+s.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),s})).subscribe(s=>{this.appointmentResponse=s,this.dialogService.showSuccessDialog("Turno generado exitosamente").afterClosed().subscribe(()=>{this.dialogService.openConfirmDialog("\xbfDesea generar otro turno?").afterClosed().subscribe(d=>{d?window.location.reload():this.router.navigate(["Dashboard/appointments/patient/list"])})})})})}}onCancel(){this.router.navigate(["/Dashboard/appointments/patient/list"])}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(l.qu),t.Y36(O.F),t.Y36(L.b),t.Y36(k.d),t.Y36(N),t.Y36($.e),t.Y36(H.L),t.Y36(j.C),t.Y36(B.J),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-patient-create"]],decls:24,vars:11,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,"card"],[1,"card-header","bg-info","text-dark","text-center"],[1,"card-body"],[1,"create-user-form",3,"formGroup","ngSubmit"],["appearance","outline"],["matInput","",3,"matAutocomplete","formControl"],["autoActiveFirstOption","",3,"displayWith"],["auto","matAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["appearance","outline",4,"ngIf"],["type","submit",1,"btn","btn-primary"],[1,"btn","btn-secondary",3,"click"],[3,"value"],["autoActiveFirstOption","",3,"displayWith","optionSelected"],["formControlName","day",3,"ngModelChange"],[4,"ngIf"],["formControlName","hour",3,"ngModelChange"],["formControlName","branch",3,"ngModelChange"],["formControlName","health_insurance"]],template:function(e,o){if(1&e&&(t.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h2"),t._uU(4,"Crear Turno"),t.qZA()(),t.TgZ(5,"div",3)(6,"form",4),t.NdJ("ngSubmit",function(){return o.onSubmit()}),t.TgZ(7,"mat-form-field",5)(8,"mat-label"),t._uU(9,"Paciente"),t.qZA(),t._UZ(10,"input",6),t.TgZ(11,"mat-autocomplete",7,8),t.YNc(13,Wo,2,2,"mat-option",9),t.qZA()(),t.YNc(14,tn,10,7,"mat-form-field",10),t.YNc(15,on,8,6,"mat-form-field",10),t.YNc(16,rn,8,2,"mat-form-field",10),t.YNc(17,cn,8,2,"mat-form-field",10),t.YNc(18,dn,6,2,"mat-form-field",10),t.YNc(19,hn,7,2,"mat-form-field",10),t.TgZ(20,"button",11),t._uU(21,"Crear"),t.qZA(),t.TgZ(22,"button",12),t.NdJ("click",function(){return o.onCancel()}),t._uU(23,"Cancelar"),t.qZA()()()()()),2&e){const i=t.MAs(12);t.xp6(6),t.Q6J("formGroup",o.appointmentForm),t.xp6(4),t.Q6J("matAutocomplete",i)("formControl",o.patientControl),t.xp6(1),t.Q6J("displayWith",o.displayPatientFn),t.xp6(2),t.Q6J("ngForOf",o.patients),t.xp6(1),t.Q6J("ngIf",o.selectedPatient),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedSpecialty&&o.selectedDoctor),t.xp6(1),t.Q6J("ngIf",o.selectedBranch&&o.selectedDoctor&&o.selectedPatient)}},dependencies:[b.sg,b.O5,U.Nt,D.KE,D.hX,D.TO,l._Y,l.Fj,l.JJ,l.JL,l.oH,l.sg,l.u,I.gD,G.ey,F.XC,F.ZL,b.Ov],styles:["create-user-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:16px}mat-form-field[_ngcontent-%COMP%]{width:100%}button[_ngcontent-%COMP%]{width:100%;margin-top:10px}"]}),n})(),_n=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-patient-delete"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-patient-delete works!"),t.qZA())}}),n})(),gn=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-patient-detail"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-patient-detail works!"),t.qZA())}}),n})();function An(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1,"Fecha"),t.qZA())}function yn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.day)}}function Cn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1,"Hora"),t.qZA())}function Dn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.hour)}}function bn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1,"Profesional"),t.qZA())}function vn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.doctor)}}function Sn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1,"Paciente"),t.qZA())}function Tn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.patient)}}function Zn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1," Especialidad "),t.qZA())}function Fn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.specialty)}}function xn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1," Especialidad - Rama "),t.qZA())}function Nn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.branch)}}function Un(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1,"Obra Social"),t.qZA())}function Pn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.health_insurance)}}function wn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1," Estado del Turno "),t.qZA())}function Jn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.appointment_status)}}function qn(n,a){1&n&&(t.TgZ(0,"th",28),t._uU(1," Estado de Pago "),t.qZA())}function Mn(n,a){if(1&n&&(t.TgZ(0,"td",29),t._uU(1),t.qZA()),2&n){const e=a.$implicit;t.xp6(1),t.Oqu(e.payment_status)}}function En(n,a){1&n&&(t.TgZ(0,"th",30),t._uU(1,"Acciones"),t.qZA())}function Qn(n,a){if(1&n){const e=t.EpF();t.TgZ(0,"button",34),t.NdJ("click",function(){t.CHM(e);const i=t.oxw().$implicit,r=t.oxw();return t.KtG(r.onDelete(i.id))}),t.TgZ(1,"i",5),t._uU(2,"delete"),t.qZA()()}}function Yn(n,a){1&n&&(t.TgZ(0,"mat-icon",35),t._uU(1,"warning"),t.qZA())}function On(n,a){if(1&n&&(t.TgZ(0,"td",29)(1,"div",31),t.YNc(2,Qn,3,0,"button",32),t.YNc(3,Yn,2,0,"mat-icon",33),t.qZA()()),2&n){const e=a.$implicit,o=t.oxw();t.xp6(2),t.Q6J("ngIf",o.canDelete(e)),t.xp6(1),t.Q6J("ngIf",!o.canDelete(e))}}function Ln(n,a){1&n&&t._UZ(0,"tr",36)}function $n(n,a){1&n&&t._UZ(0,"tr",37)}const Hn=function(){return[10,25,50,100]},Bn=[{path:"admin",children:[{path:"list/create",component:te},{path:"list",component:Nt},{path:"detail/id",component:Ut},{path:"update",component:Te},{path:"delete/:id",component:Ze}]},{path:"doctor",children:[{path:"create",component:Re},{path:"list",component:Fo},{path:"detail/:id",component:ze},{path:"update",component:zo},{path:"delete/:id",component:Ke}]},{path:"patient",children:[{path:"create",component:fn},{path:"list",component:(()=>{class n{constructor(e,o,i){this.appointmentService=e,this.dialogService=o,this.router=i,this.displayedColumns=["day","hour","doctor","branch","health_insurance","appointment_status","payment_status","actions"]}ngOnInit(){this.setDataTable()}setDataTable(e){let o;o=e?this.appointmentService.getPatientTodayAppointments(e):this.appointmentService.getPatientAppointments(),o.subscribe(i=>{this.dataSource=new _.by(i),this.paginator._intl.itemsPerPageLabel="items por p\xe1gina",this.paginator._intl.firstPageLabel="primera p\xe1gina",this.paginator._intl.lastPageLabel="\xfaltima p\xe1gina",this.paginator._intl.nextPageLabel="p\xe1gina siguiente",this.paginator._intl.previousPageLabel="p\xe1gina anterior",this.dataSource.paginator=this.paginator,this.dataSource.sort=this.sort})}showAll(){this.setDataTable()}filterToday(){const e=(0,b.p6)(new Date,"yyyy-MM-dd","en-US");this.setDataTable(e)}applyFilter(e){this.dataSource.filter=e.target.value.trim(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()}lessThan24Hours(e){let o=e.day.split("-"),i=e.hour.split(":"),r=new Date(+o[2],o[1]-1,+o[0],+i[0],+i[1]),s=new Date;return(r.getTime()-s.getTime())/1e3/60/60<24}canDelete(e){let o=e.day.split("-"),i=new Date(+o[2],o[1]-1,+o[0]);return"PAGADO"!=e.appointment_status.toUpperCase()&&i>new Date}onDelete(e){this.dialogService.openConfirmDialog("\xbfConfirma la eliminaci\xf3n de este turno?").afterClosed().subscribe(i=>{i&&this.appointmentService.deletePatientAppointment(e).pipe((0,E.K)(r=>{throw console.error("Error en la solicitud:",r),this.dialogService.showErrorDialog(r.error&&r.error.non_field_errors?"Error al eliminar el turno: "+r.error.non_field_errors[0]:"Ha ocurrido un error en la solicitud."),r})).subscribe(r=>{this.setDataTable(),this.dialogService.showSuccessDialog("Turno eliminado con \xe9xito")})})}}return n.\u0275fac=function(e){return new(e||n)(t.Y36(N),t.Y36(Q.x),t.Y36(T.F0))},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-patient-list"]],viewQuery:function(e,o){if(1&e&&(t.Gf(Y.NW,5),t.Gf(x.YE,5)),2&e){let i;t.iGM(i=t.CRH())&&(o.paginator=i.first),t.iGM(i=t.CRH())&&(o.sort=i.first)}},decls:55,vars:5,consts:[[1,"title","bg-info","text-center","text-bold","border","border-dark","rounded-top","mb-4"],[1,""],[1,"container-fluid"],[1,"d-flex","justify-content-start","mb-3"],[1,"btn","btn-info","me-3",3,"click"],[1,"material-symbols-outlined"],["routerLink","/Dashboard/appointments/patient/create",1,"btn","btn-success"],[1,"example-form-field"],["matInput","",3,"keyup"],["input",""],[1,"table-responsive"],["mat-table","","matSort","",3,"dataSource"],["matColumnDef","day"],["mat-header-cell","","mat-sort-header","",4,"matHeaderCellDef"],["mat-cell","",4,"matCellDef"],["matColumnDef","hour"],["matColumnDef","doctor"],["matColumnDef","patient"],["matColumnDef","specialty"],["matColumnDef","branch"],["matColumnDef","health_insurance"],["matColumnDef","appointment_status"],["matColumnDef","payment_status"],["matColumnDef","actions"],["mat-header-cell","",4,"matHeaderCellDef"],["mat-header-row","",4,"matHeaderRowDef"],["mat-row","",4,"matRowDef","matRowDefColumns"],["showFirstLastButtons","",3,"pageSizeOptions"],["mat-header-cell","","mat-sort-header",""],["mat-cell",""],["mat-header-cell",""],[2,"display","flex","align-items","center"],["class","btn btn-danger ms-3","aria-label","Eliminar turno",3,"click",4,"ngIf"],["style","color: yellow","matTooltip","El turno ya ha sido abonado o la fecha programada para el mismo ya ha transcurrido.",4,"ngIf"],["aria-label","Eliminar turno",1,"btn","btn-danger","ms-3",3,"click"],["matTooltip","El turno ya ha sido abonado o la fecha programada para el mismo ya ha transcurrido.",2,"color","yellow"],["mat-header-row",""],["mat-row",""]],template:function(e,o){1&e&&(t.TgZ(0,"div")(1,"div",0)(2,"h1",1),t._uU(3,"Listado de Turnos - Paciente"),t.qZA()(),t.TgZ(4,"div",2)(5,"div",3)(6,"button",4),t.NdJ("click",function(){return o.filterToday()}),t._UZ(7,"i",5),t._uU(8,"Turnos de Hoy "),t.qZA(),t.TgZ(9,"button",4),t.NdJ("click",function(){return o.showAll()}),t._UZ(10,"i",5),t._uU(11,"Todos los Turnos "),t.qZA(),t.TgZ(12,"button",6),t._UZ(13,"i",5),t._uU(14,"Crear Turno "),t.qZA()(),t.TgZ(15,"mat-form-field",7)(16,"mat-label"),t._uU(17,"Filtro M\xfaltiple"),t.qZA(),t.TgZ(18,"input",8,9),t.NdJ("keyup",function(r){return o.applyFilter(r)}),t.qZA()(),t.TgZ(20,"div",10)(21,"table",11),t.ynx(22,12),t.YNc(23,An,2,0,"th",13),t.YNc(24,yn,2,1,"td",14),t.BQk(),t.ynx(25,15),t.YNc(26,Cn,2,0,"th",13),t.YNc(27,Dn,2,1,"td",14),t.BQk(),t.ynx(28,16),t.YNc(29,bn,2,0,"th",13),t.YNc(30,vn,2,1,"td",14),t.BQk(),t.ynx(31,17),t.YNc(32,Sn,2,0,"th",13),t.YNc(33,Tn,2,1,"td",14),t.BQk(),t.ynx(34,18),t.YNc(35,Zn,2,0,"th",13),t.YNc(36,Fn,2,1,"td",14),t.BQk(),t.ynx(37,19),t.YNc(38,xn,2,0,"th",13),t.YNc(39,Nn,2,1,"td",14),t.BQk(),t.ynx(40,20),t.YNc(41,Un,2,0,"th",13),t.YNc(42,Pn,2,1,"td",14),t.BQk(),t.ynx(43,21),t.YNc(44,wn,2,0,"th",13),t.YNc(45,Jn,2,1,"td",14),t.BQk(),t.ynx(46,22),t.YNc(47,qn,2,0,"th",13),t.YNc(48,Mn,2,1,"td",14),t.BQk(),t.ynx(49,23),t.YNc(50,En,2,0,"th",24),t.YNc(51,On,4,2,"td",14),t.BQk(),t.YNc(52,Ln,1,0,"tr",25),t.YNc(53,$n,1,0,"tr",26),t.qZA()(),t._UZ(54,"mat-paginator",27),t.qZA()()),2&e&&(t.xp6(21),t.Q6J("dataSource",o.dataSource),t.xp6(31),t.Q6J("matHeaderRowDef",o.displayedColumns),t.xp6(1),t.Q6J("matRowDefColumns",o.displayedColumns),t.xp6(1),t.Q6J("pageSizeOptions",t.DdM(4,Hn)))},dependencies:[b.O5,T.rH,_.BZ,_.fO,_.as,_.w1,_.Dz,_.nj,_.ge,_.ev,_.XQ,_.Gk,Y.NW,x.YE,x.nU,U.Nt,D.KE,D.hX,z.Hw,W.gM],styles:[".example-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.mat-elevation-z8[_ngcontent-%COMP%]{background-color:#f5f5f5}button[_ngcontent-%COMP%]{min-height:20px;text-align:left}.btn-icon[_ngcontent-%COMP%]{margin-right:10px;color:#fff}.material-icons[_ngcontent-%COMP%]{margin-right:10px;vertical-align:middle}"]}),n})()},{path:"detail/:id",component:gn},{path:"update/:id",component:(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["app-appointment-patient-update"]],decls:2,vars:0,template:function(e,o){1&e&&(t.TgZ(0,"p"),t._uU(1,"appointment-patient-update works!"),t.qZA())}}),n})()},{path:"delete/:id",component:_n}]}];let In=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=t.oAB({type:n}),n.\u0275inj=t.cJS({imports:[T.Bz.forChild(Bn),T.Bz]}),n})();var kn=f(4859),Vn=f(6709),jn=f(3546);let Gn=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=t.oAB({type:n}),n.\u0275inj=t.cJS({providers:[N,O.F,k.d,L.b,N,$.e,V.e,H.L,j.C,B.J],imports:[b.ez,In,_.p0,Y.TU,x.JX,U.c,D.lN,kn.ot,Vn.p9,jn.QW,l.u5,l.UX,z.Ps,U.c,I.LD,F.Bb,W.AV]}),n})()}}]);